// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  BrawlersService,
  ClubsService,
  PlayersService,
  EventsService,
  RankingsService,
} from '../sdk.gen'
import {
  queryOptions,
  infiniteQueryOptions,
  type InfiniteData,
} from '@tanstack/react-query'
import type {
  GetBrawlersData,
  GetBrawlersError,
  GetBrawlersResponse,
  GetClubMembersData,
  GetClubMembersError,
  GetClubMembersResponse,
  GetBattleLogData,
  GetPlayerData,
  GetScheduledEventsData,
  GetClubData,
  GetClubRankingsData,
  GetClubRankingsError,
  GetClubRankingsResponse,
  GetBrawlerRankingsData,
  GetBrawlerRankingsError,
  GetBrawlerRankingsResponse,
  GetBrawlerData,
  GetPlayerRankingsData,
  GetPlayerRankingsError,
  GetPlayerRankingsResponse,
} from '../types.gen'
import type { AxiosError } from 'axios'
import { client as _heyApiClient } from '../client.gen'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const getBrawlersQueryKey = (options?: Options<GetBrawlersData>) =>
  createQueryKey('getBrawlers', options)

export const getBrawlersOptions = (options?: Options<GetBrawlersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await BrawlersService.getBrawlers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getBrawlersQueryKey(options),
  })
}

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0]
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    }
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    }
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    }
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    }
  }
  return params as unknown as typeof page
}

export const getBrawlersInfiniteQueryKey = (
  options?: Options<GetBrawlersData>,
): QueryKey<Options<GetBrawlersData>> =>
  createQueryKey('getBrawlers', options, true)

export const getBrawlersInfiniteOptions = (
  options?: Options<GetBrawlersData>,
) => {
  return infiniteQueryOptions<
    GetBrawlersResponse,
    AxiosError<GetBrawlersError>,
    InfiniteData<GetBrawlersResponse>,
    QueryKey<Options<GetBrawlersData>>,
    | string
    | Pick<
        QueryKey<Options<GetBrawlersData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetBrawlersData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  before: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await BrawlersService.getBrawlers({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: getBrawlersInfiniteQueryKey(options),
    },
  )
}

export const getClubMembersQueryKey = (options: Options<GetClubMembersData>) =>
  createQueryKey('getClubMembers', options)

export const getClubMembersOptions = (options: Options<GetClubMembersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ClubsService.getClubMembers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getClubMembersQueryKey(options),
  })
}

export const getClubMembersInfiniteQueryKey = (
  options: Options<GetClubMembersData>,
): QueryKey<Options<GetClubMembersData>> =>
  createQueryKey('getClubMembers', options, true)

export const getClubMembersInfiniteOptions = (
  options: Options<GetClubMembersData>,
) => {
  return infiniteQueryOptions<
    GetClubMembersResponse,
    AxiosError<GetClubMembersError>,
    InfiniteData<GetClubMembersResponse>,
    QueryKey<Options<GetClubMembersData>>,
    | string
    | Pick<
        QueryKey<Options<GetClubMembersData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetClubMembersData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  before: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await ClubsService.getClubMembers({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: getClubMembersInfiniteQueryKey(options),
    },
  )
}

export const getBattleLogQueryKey = (options: Options<GetBattleLogData>) =>
  createQueryKey('getBattleLog', options)

export const getBattleLogOptions = (options: Options<GetBattleLogData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await PlayersService.getBattleLog({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getBattleLogQueryKey(options),
  })
}

export const getPlayerQueryKey = (options: Options<GetPlayerData>) =>
  createQueryKey('getPlayer', options)

export const getPlayerOptions = (options: Options<GetPlayerData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await PlayersService.getPlayer({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getPlayerQueryKey(options),
  })
}

export const getScheduledEventsQueryKey = (
  options?: Options<GetScheduledEventsData>,
) => createQueryKey('getScheduledEvents', options)

export const getScheduledEventsOptions = (
  options?: Options<GetScheduledEventsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await EventsService.getScheduledEvents({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getScheduledEventsQueryKey(options),
  })
}

export const getClubQueryKey = (options: Options<GetClubData>) =>
  createQueryKey('getClub', options)

export const getClubOptions = (options: Options<GetClubData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ClubsService.getClub({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getClubQueryKey(options),
  })
}

export const getClubRankingsQueryKey = (
  options: Options<GetClubRankingsData>,
) => createQueryKey('getClubRankings', options)

export const getClubRankingsOptions = (
  options: Options<GetClubRankingsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await RankingsService.getClubRankings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getClubRankingsQueryKey(options),
  })
}

export const getClubRankingsInfiniteQueryKey = (
  options: Options<GetClubRankingsData>,
): QueryKey<Options<GetClubRankingsData>> =>
  createQueryKey('getClubRankings', options, true)

export const getClubRankingsInfiniteOptions = (
  options: Options<GetClubRankingsData>,
) => {
  return infiniteQueryOptions<
    GetClubRankingsResponse,
    AxiosError<GetClubRankingsError>,
    InfiniteData<GetClubRankingsResponse>,
    QueryKey<Options<GetClubRankingsData>>,
    | string
    | Pick<
        QueryKey<Options<GetClubRankingsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetClubRankingsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  before: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await RankingsService.getClubRankings({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: getClubRankingsInfiniteQueryKey(options),
    },
  )
}

export const getBrawlerRankingsQueryKey = (
  options: Options<GetBrawlerRankingsData>,
) => createQueryKey('getBrawlerRankings', options)

export const getBrawlerRankingsOptions = (
  options: Options<GetBrawlerRankingsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await RankingsService.getBrawlerRankings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getBrawlerRankingsQueryKey(options),
  })
}

export const getBrawlerRankingsInfiniteQueryKey = (
  options: Options<GetBrawlerRankingsData>,
): QueryKey<Options<GetBrawlerRankingsData>> =>
  createQueryKey('getBrawlerRankings', options, true)

export const getBrawlerRankingsInfiniteOptions = (
  options: Options<GetBrawlerRankingsData>,
) => {
  return infiniteQueryOptions<
    GetBrawlerRankingsResponse,
    AxiosError<GetBrawlerRankingsError>,
    InfiniteData<GetBrawlerRankingsResponse>,
    QueryKey<Options<GetBrawlerRankingsData>>,
    | string
    | Pick<
        QueryKey<Options<GetBrawlerRankingsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetBrawlerRankingsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  before: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await RankingsService.getBrawlerRankings({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: getBrawlerRankingsInfiniteQueryKey(options),
    },
  )
}

export const getBrawlerQueryKey = (options: Options<GetBrawlerData>) =>
  createQueryKey('getBrawler', options)

export const getBrawlerOptions = (options: Options<GetBrawlerData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await BrawlersService.getBrawler({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getBrawlerQueryKey(options),
  })
}

export const getPlayerRankingsQueryKey = (
  options: Options<GetPlayerRankingsData>,
) => createQueryKey('getPlayerRankings', options)

export const getPlayerRankingsOptions = (
  options: Options<GetPlayerRankingsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await RankingsService.getPlayerRankings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getPlayerRankingsQueryKey(options),
  })
}

export const getPlayerRankingsInfiniteQueryKey = (
  options: Options<GetPlayerRankingsData>,
): QueryKey<Options<GetPlayerRankingsData>> =>
  createQueryKey('getPlayerRankings', options, true)

export const getPlayerRankingsInfiniteOptions = (
  options: Options<GetPlayerRankingsData>,
) => {
  return infiniteQueryOptions<
    GetPlayerRankingsResponse,
    AxiosError<GetPlayerRankingsError>,
    InfiniteData<GetPlayerRankingsResponse>,
    QueryKey<Options<GetPlayerRankingsData>>,
    | string
    | Pick<
        QueryKey<Options<GetPlayerRankingsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetPlayerRankingsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  before: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await RankingsService.getPlayerRankings({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: getPlayerRankingsInfiniteQueryKey(options),
    },
  )
}


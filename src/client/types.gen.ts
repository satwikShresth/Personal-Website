// This file is auto-generated by @hey-api/openapi-ts

export type PlayerRankingList = Array<PlayerRanking>

export type PlayerRanking = {
  club?: PlayerRankingClub
  icon?: PlayerIcon
  trophies?: number
  tag?: string
  name?: string
  rank?: number
  nameColor?: string
}

export type PlayerIcon = {
  id?: number
}

export type PlayerRankingClub = {
  name?: string
}

export type ServiceVersion = {
  major?: number
  minor?: number
  content?: number
}

export type Brawler = {
  gadgets?: AccessoryList
  name?: JsonLocalizedName
  id?: number
  starPowers?: StarPowerList
}

export type StarPowerList = Array<StarPower>

export type StarPower = {
  name?: JsonLocalizedName
  id?: number
}

export type JsonLocalizedName = {
  [key: string]: unknown
}

export type AccessoryList = Array<Accessory>

export type Accessory = {
  name?: JsonLocalizedName
  id?: number
}

export type BattleRegionList = Array<BattleRegion>

export type BattleRegion = {
  id?: number
  name?: string
}

export type ClubRankingList = Array<ClubRanking>

export type ClubRanking = {
  tag?: string
  name?: string
  trophies?: number
  rank?: number
  memberCount?: number
  badgeId?: number
}

export type RegisterMatchRequest = {
  mode?: 'regular' | 'powerMatch'
  players?: RegisterMatchRequestPlayers
  locationId?: number
  winsRequired?: number
  gadgetsAllowed?: boolean
  bannedBrawlers?: BannedBrawlerList
  timerPreset?: 'default' | 'longer' | 'longest'
}

export type BannedBrawlerList = Array<BannedBrawlerEntry>

export type BannedBrawlerEntry = {
  id?: number
  side?: number
}

export type RegisterMatchRequestPlayers = Array<PlayerEntry>

export type PlayerEntry = {
  tag?: string
  side?: number
}

export type RegisterMatchResponse = {
  id?: string
}

export type MatchLocationList = Array<MatchLocation>

export type MatchLocation = {
  id?: number
  name?: string
  gameMode?: string
}

export type SetEsportsNotificationRequest = {
  type?: 'hub' | 'unknown'
  players?: unknown
  ttl?: number
}

export type SetEsportsNotificationResponse = {
  notification?: SetEsportsNotificationRequest
  status?: string
}

export type Club = {
  tag?: string
  name?: string
  description?: string
  trophies?: number
  requiredTrophies?: number
  members?: ClubMemberList
  type?: 'open' | 'inviteOnly' | 'closed' | 'unknown'
  badgeId?: number
}

export type ClubMemberList = Array<ClubMember>

export type ClubMember = {
  icon?: PlayerIcon
  tag?: string
  name?: string
  trophies?: number
  role?:
    | 'notMember'
    | 'member'
    | 'president'
    | 'senior'
    | 'vicePresident'
    | 'unknown'
  nameColor?: string
}

export type ScheduledEvents = Array<ScheduledEvent>

export type ScheduledEvent = {
  slotId?: number
  event?: ScheduledEventLocation
  startTime?: string
  endTime?: string
}

export type ScheduledEventLocation = {
  mode?:
    | 'soloShowdown'
    | 'duoShowdown'
    | 'heist'
    | 'bounty'
    | 'siege'
    | 'gemGrab'
    | 'brawlBall'
    | 'bigGame'
    | 'bossFight'
    | 'roboRumble'
    | 'takedown'
    | 'loneStar'
    | 'presentPlunder'
    | 'hotZone'
    | 'superCityRampage'
    | 'knockout'
    | 'volleyBrawl'
    | 'basketBrawl'
    | 'holdTheTrophy'
    | 'trophyThieves'
    | 'duels'
    | 'wipeout'
    | 'payload'
    | 'botDrop'
    | 'hunters'
    | 'lastStand'
    | 'snowtelThieves'
    | 'pumpkinPlunder'
    | 'trophyEscape'
    | 'wipeout5V5'
    | 'knockout5V5'
    | 'gemGrab5V5'
    | 'brawlBall5V5'
    | 'godzillaCitySmash'
    | 'paintBrawl'
    | 'trioShowdown'
    | 'zombiePlunder'
    | 'jellyfishing'
    | 'unknown'
  modifiers?: EventModifierList
  id?: number
  map?: JsonLocalizedName
}

export type EventModifierList = Array<
  | 'unknown'
  | 'none'
  | 'energyDrink'
  | 'angryRobo'
  | 'meteorShower'
  | 'graveyardShift'
  | 'healingMushrooms'
  | 'bossFightRockets'
  | 'takedownLasers'
  | 'takedownChainLightning'
  | 'takedownRockets'
  | 'waves'
  | 'hauntedBall'
  | 'superCharge'
  | 'fastBrawlers'
  | 'showdown+'
  | 'peekABoo'
  | 'burningBall'
>

export type EventModifier = {
  [key: string]: unknown
}

export type Player = {
  club?: PlayerClub
  '3vs3Victories'?: number
  isQualifiedFromChampionshipChallenge?: boolean
  icon?: PlayerIcon
  tag?: string
  name?: string
  trophies?: number
  expLevel?: number
  expPoints?: number
  highestTrophies?: number
  soloVictories?: number
  duoVictories?: number
  bestRoboRumbleTime?: number
  bestTimeAsBigBrawler?: number
  brawlers?: BrawlerStatList
  nameColor?: string
}

export type BrawlerStatList = Array<BrawlerStat>

export type BrawlerStat = {
  gadgets?: AccessoryList
  starPowers?: StarPowerList
  id?: number
  rank?: number
  trophies?: number
  highestTrophies?: number
  power?: number
  gears?: GearStatList
  name?: JsonLocalizedName
}

export type GearStatList = Array<GearStat>

export type GearStat = {
  name?: JsonLocalizedName
  id?: number
  level?: number
}

export type PlayerClub = {
  tag?: string
  name?: string
}

export type Match = {
  initiativeSide?: number
  round?: number
  teams?: MatchTeamList
  terminationReason?:
    | 'none'
    | 'playerDisconnected'
    | 'playerNotResponding'
    | 'technicalError'
    | 'matchTooLong'
    | 'other'
  games?: CompletedGameList
  phase?:
    | 'init'
    | 'banHeroes'
    | 'pickHeroes'
    | 'finalPreparation'
    | 'battle'
    | 'matchResult'
    | 'ending'
  players?: PlayerMatchStatusList
  state?: 'open' | 'cancelled' | 'completed'
  id?: string
}

export type PlayerMatchStatusList = Array<PlayerMatchStatus>

export type PlayerMatchStatus = {
  brawler?: BrawlerInfo
  isOnline?: boolean
  hasJoined?: boolean
  isReady?: boolean
  isInBattle?: boolean
  tag?: string
}

export type BrawlerInfo = {
  gears?: GearInfoList
  starPower?: StarPower
  gadget?: Accessory
  power?: number
  trophies?: number
  trophyChange?: number
  name?: JsonLocalizedName
  id?: number
}

export type GearInfoList = Array<GearInfo>

export type GearInfo = {
  name?: JsonLocalizedName
  id?: number
  level?: number
}

export type CompletedGameList = Array<CompletedGame>

export type CompletedGame = {
  teams?: CompletedGameTeamList
  duration?: number
  location?: MatchLocation
  replayId?: string
}

export type CompletedGameTeamList = Array<CompletedGameTeam>

export type CompletedGameTeam = {
  score?: number
  isWinner?: boolean
  siege?: SiegeStats
  players?: PlayerEntryCompletedGameList
}

export type PlayerEntryCompletedGameList = Array<PlayerEntryCompletedGame>

export type PlayerEntryCompletedGame = {
  brawler?: BrawlerInfo
  statistics?: Stats
  tag?: string
  accountId?: string
}

export type Stats = {
  objectivesStolen?: number
  brawlBallShotsOnGoal?: number
  brawlBallShotsSaved?: number
  gemGrabGemsCollected?: number
  gemGrabGemsLost?: number
  bountyStarsGained?: number
  bountyStarsLost?: number
  superUsedCount?: number
  gadgetUsedCount?: number
  bountyPickedMiddleStar?: boolean
  matchEndKillStreak?: number
  maxKillStreak?: number
  hotZoneInsideZonePercentage?: number
  healingDoneToSelf?: number
  healingDoneToTeamMates?: number
  objectivesRecovered?: number
  healingDone?: number
  deaths?: number
  damageDealt?: number
  kills?: number
  averageLatency?: number
  damageReceived?: number
  totalDamageToSafe?: number
  totalDamageToPets?: number
  siegeDamageToRobot?: number
  siegeBoltsCollected?: number
  brawlBallGoalsScored?: number
}

export type SiegeStats = {
  botDamageToBase?: number
  botLevelByRound?: unknown
}

export type MatchTeamList = Array<MatchTeam>

export type MatchTeam = {
  players?: MatchTeamPlayerList
  bans?: BrawlerInfoList
  side?: number
}

export type BrawlerInfoList = Array<BrawlerInfo>

export type MatchTeamPlayerList = Array<MatchTeamPlayer>

export type MatchTeamPlayer = {
  causedTermination?: boolean
  tag?: string
  isLeader?: boolean
  brawler?: BrawlerInfo
}

export type CancelMatchResponse = {
  success?: boolean
}

export type BattleList = Array<Battle>

export type Battle = {
  battle?: BattleResult
  battleTime?: string
  event?: Event
}

export type Event = {
  mode?:
    | 'soloShowdown'
    | 'duoShowdown'
    | 'heist'
    | 'bounty'
    | 'siege'
    | 'gemGrab'
    | 'brawlBall'
    | 'bigGame'
    | 'bossFight'
    | 'roboRumble'
    | 'takedown'
    | 'loneStar'
    | 'presentPlunder'
    | 'hotZone'
    | 'superCityRampage'
    | 'knockout'
    | 'volleyBrawl'
    | 'basketBrawl'
    | 'holdTheTrophy'
    | 'trophyThieves'
    | 'duels'
    | 'wipeout'
    | 'payload'
    | 'botDrop'
    | 'hunters'
    | 'lastStand'
    | 'snowtelThieves'
    | 'pumpkinPlunder'
    | 'trophyEscape'
    | 'wipeout5V5'
    | 'knockout5V5'
    | 'gemGrab5V5'
    | 'brawlBall5V5'
    | 'godzillaCitySmash'
    | 'paintBrawl'
    | 'trioShowdown'
    | 'zombiePlunder'
    | 'jellyfishing'
    | 'unknown'
  id?: number
  map?: JsonLocalizedName
}

export type BattleResult = {
  [key: string]: unknown
}

export type BrawlerList = Array<Brawler>

export type ClientError = {
  reason?: string
  message?: string
  type?: string
  detail?: {
    [key: string]: unknown
  }
}

export type GetBrawlersData = {
  body?: never
  path?: never
  query?: {
    /**
     * Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
     *
     */
    before?: string
    /**
     * Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
     *
     */
    after?: string
    /**
     * Limit the number of items returned in the response.
     */
    limit?: number
  }
  url: '/brawlers'
}

export type GetBrawlersErrors = {
  /**
   * Client provided incorrect parameters for the request.
   */
  400: ClientError
  /**
   * Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
   *
   */
  403: ClientError
  /**
   * Resource was not found.
   */
  404: ClientError
  /**
   * Request was throttled, because amount of requests was above the threshold defined for the used API token.
   *
   */
  429: ClientError
  /**
   * Unknown error happened when handling the request.
   */
  500: ClientError
  /**
   * Service is temprorarily unavailable because of maintenance.
   */
  503: ClientError
}

export type GetBrawlersError = GetBrawlersErrors[keyof GetBrawlersErrors]

export type GetBrawlersResponses = {
  /**
   * Successful response
   */
  200: BrawlerList
}

export type GetBrawlersResponse =
  GetBrawlersResponses[keyof GetBrawlersResponses]

export type GetClubMembersData = {
  body?: never
  path: {
    /**
     * Tag of the club.
     */
    clubTag: string
  }
  query?: {
    /**
     * Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
     *
     */
    before?: string
    /**
     * Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
     *
     */
    after?: string
    /**
     * Limit the number of items returned in the response.
     */
    limit?: number
  }
  url: '/clubs/{clubTag}/members'
}

export type GetClubMembersErrors = {
  /**
   * Client provided incorrect parameters for the request.
   */
  400: ClientError
  /**
   * Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
   *
   */
  403: ClientError
  /**
   * Resource was not found.
   */
  404: ClientError
  /**
   * Request was throttled, because amount of requests was above the threshold defined for the used API token.
   *
   */
  429: ClientError
  /**
   * Unknown error happened when handling the request.
   */
  500: ClientError
  /**
   * Service is temprorarily unavailable because of maintenance.
   */
  503: ClientError
}

export type GetClubMembersError =
  GetClubMembersErrors[keyof GetClubMembersErrors]

export type GetClubMembersResponses = {
  /**
   * Successful response
   */
  200: ClubMemberList
}

export type GetClubMembersResponse =
  GetClubMembersResponses[keyof GetClubMembersResponses]

export type GetBattleLogData = {
  body?: never
  path: {
    /**
     * Tag of the player.
     */
    playerTag: string
  }
  query?: never
  url: '/players/{playerTag}/battlelog'
}

export type GetBattleLogErrors = {
  /**
   * Client provided incorrect parameters for the request.
   */
  400: ClientError
  /**
   * Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
   *
   */
  403: ClientError
  /**
   * Resource was not found.
   */
  404: ClientError
  /**
   * Request was throttled, because amount of requests was above the threshold defined for the used API token.
   *
   */
  429: ClientError
  /**
   * Unknown error happened when handling the request.
   */
  500: ClientError
  /**
   * Service is temprorarily unavailable because of maintenance.
   */
  503: ClientError
}

export type GetBattleLogError = GetBattleLogErrors[keyof GetBattleLogErrors]

export type GetBattleLogResponses = {
  /**
   * Successful response
   */
  200: BattleList
}

export type GetBattleLogResponse =
  GetBattleLogResponses[keyof GetBattleLogResponses]

export type GetPlayerData = {
  body?: never
  path: {
    /**
     * Tag of the player.
     */
    playerTag: string
  }
  query?: never
  url: '/players/{playerTag}'
}

export type GetPlayerErrors = {
  /**
   * Client provided incorrect parameters for the request.
   */
  400: ClientError
  /**
   * Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
   *
   */
  403: ClientError
  /**
   * Resource was not found.
   */
  404: ClientError
  /**
   * Request was throttled, because amount of requests was above the threshold defined for the used API token.
   *
   */
  429: ClientError
  /**
   * Unknown error happened when handling the request.
   */
  500: ClientError
  /**
   * Service is temprorarily unavailable because of maintenance.
   */
  503: ClientError
}

export type GetPlayerError = GetPlayerErrors[keyof GetPlayerErrors]

export type GetPlayerResponses = {
  /**
   * Successful response
   */
  200: Player
}

export type GetPlayerResponse = GetPlayerResponses[keyof GetPlayerResponses]

export type GetScheduledEventsData = {
  body?: never
  path?: never
  query?: never
  url: '/events/rotation'
}

export type GetScheduledEventsErrors = {
  /**
   * Client provided incorrect parameters for the request.
   */
  400: ClientError
  /**
   * Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
   *
   */
  403: ClientError
  /**
   * Resource was not found.
   */
  404: ClientError
  /**
   * Request was throttled, because amount of requests was above the threshold defined for the used API token.
   *
   */
  429: ClientError
  /**
   * Unknown error happened when handling the request.
   */
  500: ClientError
  /**
   * Service is temprorarily unavailable because of maintenance.
   */
  503: ClientError
}

export type GetScheduledEventsError =
  GetScheduledEventsErrors[keyof GetScheduledEventsErrors]

export type GetScheduledEventsResponses = {
  /**
   * Successful response
   */
  200: ScheduledEvents
}

export type GetScheduledEventsResponse =
  GetScheduledEventsResponses[keyof GetScheduledEventsResponses]

export type GetClubData = {
  body?: never
  path: {
    /**
     * Tag of the club.
     */
    clubTag: string
  }
  query?: never
  url: '/clubs/{clubTag}'
}

export type GetClubErrors = {
  /**
   * Client provided incorrect parameters for the request.
   */
  400: ClientError
  /**
   * Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
   *
   */
  403: ClientError
  /**
   * Resource was not found.
   */
  404: ClientError
  /**
   * Request was throttled, because amount of requests was above the threshold defined for the used API token.
   *
   */
  429: ClientError
  /**
   * Unknown error happened when handling the request.
   */
  500: ClientError
  /**
   * Service is temprorarily unavailable because of maintenance.
   */
  503: ClientError
}

export type GetClubError = GetClubErrors[keyof GetClubErrors]

export type GetClubResponses = {
  /**
   * Successful response
   */
  200: Club
}

export type GetClubResponse = GetClubResponses[keyof GetClubResponses]

export type GetClubRankingsData = {
  body?: never
  path: {
    /**
     * Two letter country code, or 'global' for global rankings.
     */
    countryCode: string
  }
  query?: {
    /**
     * Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
     *
     */
    before?: string
    /**
     * Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
     *
     */
    after?: string
    /**
     * Limit the number of items returned in the response.
     */
    limit?: number
  }
  url: '/rankings/{countryCode}/clubs'
}

export type GetClubRankingsErrors = {
  /**
   * Client provided incorrect parameters for the request.
   */
  400: ClientError
  /**
   * Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
   *
   */
  403: ClientError
  /**
   * Resource was not found.
   */
  404: ClientError
  /**
   * Request was throttled, because amount of requests was above the threshold defined for the used API token.
   *
   */
  429: ClientError
  /**
   * Unknown error happened when handling the request.
   */
  500: ClientError
  /**
   * Service is temprorarily unavailable because of maintenance.
   */
  503: ClientError
}

export type GetClubRankingsError =
  GetClubRankingsErrors[keyof GetClubRankingsErrors]

export type GetClubRankingsResponses = {
  /**
   * Successful response
   */
  200: ClubRankingList
}

export type GetClubRankingsResponse =
  GetClubRankingsResponses[keyof GetClubRankingsResponses]

export type GetBrawlerRankingsData = {
  body?: never
  path: {
    /**
     * Two letter country code, or 'global' for global rankings.
     */
    countryCode: string
    /**
     * Identifier of the brawler.
     */
    brawlerId: string
  }
  query?: {
    /**
     * Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
     *
     */
    before?: string
    /**
     * Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
     *
     */
    after?: string
    /**
     * Limit the number of items returned in the response.
     */
    limit?: number
  }
  url: '/rankings/{countryCode}/brawlers/{brawlerId}'
}

export type GetBrawlerRankingsErrors = {
  /**
   * Client provided incorrect parameters for the request.
   */
  400: ClientError
  /**
   * Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
   *
   */
  403: ClientError
  /**
   * Resource was not found.
   */
  404: ClientError
  /**
   * Request was throttled, because amount of requests was above the threshold defined for the used API token.
   *
   */
  429: ClientError
  /**
   * Unknown error happened when handling the request.
   */
  500: ClientError
  /**
   * Service is temprorarily unavailable because of maintenance.
   */
  503: ClientError
}

export type GetBrawlerRankingsError =
  GetBrawlerRankingsErrors[keyof GetBrawlerRankingsErrors]

export type GetBrawlerRankingsResponses = {
  /**
   * Successful response
   */
  200: PlayerRankingList
}

export type GetBrawlerRankingsResponse =
  GetBrawlerRankingsResponses[keyof GetBrawlerRankingsResponses]

export type GetBrawlerData = {
  body?: never
  path: {
    /**
     * Identifier of the brawler.
     */
    brawlerId: string
  }
  query?: never
  url: '/brawlers/{brawlerId}'
}

export type GetBrawlerErrors = {
  /**
   * Client provided incorrect parameters for the request.
   */
  400: ClientError
  /**
   * Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
   *
   */
  403: ClientError
  /**
   * Resource was not found.
   */
  404: ClientError
  /**
   * Request was throttled, because amount of requests was above the threshold defined for the used API token.
   *
   */
  429: ClientError
  /**
   * Unknown error happened when handling the request.
   */
  500: ClientError
  /**
   * Service is temprorarily unavailable because of maintenance.
   */
  503: ClientError
}

export type GetBrawlerError = GetBrawlerErrors[keyof GetBrawlerErrors]

export type GetBrawlerResponses = {
  /**
   * Successful response
   */
  200: Brawler
}

export type GetBrawlerResponse = GetBrawlerResponses[keyof GetBrawlerResponses]

export type GetPlayerRankingsData = {
  body?: never
  path: {
    /**
     * Two letter country code, or 'global' for global rankings.
     */
    countryCode: string
  }
  query?: {
    /**
     * Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
     *
     */
    before?: string
    /**
     * Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both.
     *
     */
    after?: string
    /**
     * Limit the number of items returned in the response.
     */
    limit?: number
  }
  url: '/rankings/{countryCode}/players'
}

export type GetPlayerRankingsErrors = {
  /**
   * Client provided incorrect parameters for the request.
   */
  400: ClientError
  /**
   * Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.
   *
   */
  403: ClientError
  /**
   * Resource was not found.
   */
  404: ClientError
  /**
   * Request was throttled, because amount of requests was above the threshold defined for the used API token.
   *
   */
  429: ClientError
  /**
   * Unknown error happened when handling the request.
   */
  500: ClientError
  /**
   * Service is temprorarily unavailable because of maintenance.
   */
  503: ClientError
}

export type GetPlayerRankingsError =
  GetPlayerRankingsErrors[keyof GetPlayerRankingsErrors]

export type GetPlayerRankingsResponses = {
  /**
   * Successful response
   */
  200: PlayerRankingList
}

export type GetPlayerRankingsResponse =
  GetPlayerRankingsResponses[keyof GetPlayerRankingsResponses]

export type ClientOptions = {
  baseURL:
    | 'https://api.brawlstars.com/v1'
    | 'http://api.brawlstars.com/v1'
    | (string & {})
}


// This file is auto-generated by @hey-api/openapi-ts

export const PlayerRankingListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/PlayerRanking',
  },
} as const

export const PlayerRankingSchema = {
  type: 'object',
  properties: {
    club: {
      $ref: '#/definitions/PlayerRankingClub',
    },
    icon: {
      $ref: '#/definitions/PlayerIcon',
    },
    trophies: {
      type: 'integer',
    },
    tag: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    rank: {
      type: 'integer',
    },
    nameColor: {
      type: 'string',
    },
  },
} as const

export const PlayerIconSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
    },
  },
} as const

export const PlayerRankingClubSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
  },
} as const

export const ServiceVersionSchema = {
  type: 'object',
  properties: {
    major: {
      type: 'integer',
    },
    minor: {
      type: 'integer',
    },
    content: {
      type: 'integer',
    },
  },
} as const

export const BrawlerSchema = {
  type: 'object',
  properties: {
    gadgets: {
      $ref: '#/definitions/AccessoryList',
    },
    name: {
      $ref: '#/definitions/JsonLocalizedName',
    },
    id: {
      type: 'integer',
    },
    starPowers: {
      $ref: '#/definitions/StarPowerList',
    },
  },
} as const

export const StarPowerListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/StarPower',
  },
} as const

export const StarPowerSchema = {
  type: 'object',
  properties: {
    name: {
      $ref: '#/definitions/JsonLocalizedName',
    },
    id: {
      type: 'integer',
    },
  },
} as const

export const JsonLocalizedNameSchema = {
  type: 'object',
} as const

export const AccessoryListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/Accessory',
  },
} as const

export const AccessorySchema = {
  type: 'object',
  properties: {
    name: {
      $ref: '#/definitions/JsonLocalizedName',
    },
    id: {
      type: 'integer',
    },
  },
} as const

export const BattleRegionListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/BattleRegion',
  },
} as const

export const BattleRegionSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
    },
    name: {
      type: 'string',
    },
  },
} as const

export const ClubRankingListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/ClubRanking',
  },
} as const

export const ClubRankingSchema = {
  type: 'object',
  properties: {
    tag: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    trophies: {
      type: 'integer',
    },
    rank: {
      type: 'integer',
    },
    memberCount: {
      type: 'integer',
    },
    badgeId: {
      type: 'integer',
    },
  },
} as const

export const RegisterMatchRequestSchema = {
  type: 'object',
  properties: {
    mode: {
      type: 'string',
      enum: ['regular', 'powerMatch'],
    },
    players: {
      $ref: '#/definitions/RegisterMatchRequestPlayers',
    },
    locationId: {
      type: 'integer',
    },
    winsRequired: {
      type: 'integer',
    },
    gadgetsAllowed: {
      type: 'boolean',
    },
    bannedBrawlers: {
      $ref: '#/definitions/BannedBrawlerList',
    },
    timerPreset: {
      type: 'string',
      enum: ['default', 'longer', 'longest'],
    },
  },
} as const

export const BannedBrawlerListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/BannedBrawlerEntry',
  },
} as const

export const BannedBrawlerEntrySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
    },
    side: {
      type: 'integer',
    },
  },
} as const

export const RegisterMatchRequestPlayersSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/PlayerEntry',
  },
} as const

export const PlayerEntrySchema = {
  type: 'object',
  properties: {
    tag: {
      type: 'string',
    },
    side: {
      type: 'integer',
    },
  },
} as const

export const RegisterMatchResponseSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
  },
} as const

export const MatchLocationListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/MatchLocation',
  },
} as const

export const MatchLocationSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    gameMode: {
      type: 'string',
    },
  },
} as const

export const SetEsportsNotificationRequestSchema = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      enum: ['hub', 'unknown'],
    },
    players: {
      type: 'list',
    },
    ttl: {
      type: 'integer',
    },
  },
} as const

export const SetEsportsNotificationResponseSchema = {
  type: 'object',
  properties: {
    notification: {
      $ref: '#/definitions/SetEsportsNotificationRequest',
    },
    status: {
      type: 'string',
    },
  },
} as const

export const ClubSchema = {
  type: 'object',
  properties: {
    tag: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    trophies: {
      type: 'integer',
    },
    requiredTrophies: {
      type: 'integer',
    },
    members: {
      $ref: '#/definitions/ClubMemberList',
    },
    type: {
      type: 'string',
      enum: ['open', 'inviteOnly', 'closed', 'unknown'],
    },
    badgeId: {
      type: 'integer',
    },
  },
} as const

export const ClubMemberListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/ClubMember',
  },
} as const

export const ClubMemberSchema = {
  type: 'object',
  properties: {
    icon: {
      $ref: '#/definitions/PlayerIcon',
    },
    tag: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    trophies: {
      type: 'integer',
    },
    role: {
      type: 'string',
      enum: [
        'notMember',
        'member',
        'president',
        'senior',
        'vicePresident',
        'unknown',
      ],
    },
    nameColor: {
      type: 'string',
    },
  },
} as const

export const ScheduledEventsSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/ScheduledEvent',
  },
} as const

export const ScheduledEventSchema = {
  type: 'object',
  properties: {
    slotId: {
      type: 'integer',
    },
    event: {
      $ref: '#/definitions/ScheduledEventLocation',
    },
    startTime: {
      type: 'string',
    },
    endTime: {
      type: 'string',
    },
  },
} as const

export const ScheduledEventLocationSchema = {
  type: 'object',
  properties: {
    mode: {
      type: 'string',
      enum: [
        'soloShowdown',
        'duoShowdown',
        'heist',
        'bounty',
        'siege',
        'gemGrab',
        'brawlBall',
        'bigGame',
        'bossFight',
        'roboRumble',
        'takedown',
        'loneStar',
        'presentPlunder',
        'hotZone',
        'superCityRampage',
        'knockout',
        'volleyBrawl',
        'basketBrawl',
        'holdTheTrophy',
        'trophyThieves',
        'duels',
        'wipeout',
        'payload',
        'botDrop',
        'hunters',
        'lastStand',
        'snowtelThieves',
        'pumpkinPlunder',
        'trophyEscape',
        'wipeout5V5',
        'knockout5V5',
        'gemGrab5V5',
        'brawlBall5V5',
        'godzillaCitySmash',
        'paintBrawl',
        'trioShowdown',
        'zombiePlunder',
        'jellyfishing',
        'unknown',
      ],
    },
    modifiers: {
      $ref: '#/definitions/EventModifierList',
    },
    id: {
      type: 'integer',
    },
    map: {
      $ref: '#/definitions/JsonLocalizedName',
    },
  },
} as const

export const EventModifierListSchema = {
  type: 'array',
  items: {
    type: 'string',
    enum: [
      'unknown',
      'none',
      'energyDrink',
      'angryRobo',
      'meteorShower',
      'graveyardShift',
      'healingMushrooms',
      'bossFightRockets',
      'takedownLasers',
      'takedownChainLightning',
      'takedownRockets',
      'waves',
      'hauntedBall',
      'superCharge',
      'fastBrawlers',
      'showdown+',
      'peekABoo',
      'burningBall',
    ],
  },
} as const

export const EventModifierSchema = {
  type: 'object',
} as const

export const PlayerSchema = {
  type: 'object',
  properties: {
    club: {
      $ref: '#/definitions/PlayerClub',
    },
    '3vs3Victories': {
      type: 'integer',
    },
    isQualifiedFromChampionshipChallenge: {
      type: 'boolean',
    },
    icon: {
      $ref: '#/definitions/PlayerIcon',
    },
    tag: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    trophies: {
      type: 'integer',
    },
    expLevel: {
      type: 'integer',
    },
    expPoints: {
      type: 'integer',
    },
    highestTrophies: {
      type: 'integer',
    },
    soloVictories: {
      type: 'integer',
    },
    duoVictories: {
      type: 'integer',
    },
    bestRoboRumbleTime: {
      type: 'integer',
    },
    bestTimeAsBigBrawler: {
      type: 'integer',
    },
    brawlers: {
      $ref: '#/definitions/BrawlerStatList',
    },
    nameColor: {
      type: 'string',
    },
  },
} as const

export const BrawlerStatListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/BrawlerStat',
  },
} as const

export const BrawlerStatSchema = {
  type: 'object',
  properties: {
    gadgets: {
      $ref: '#/definitions/AccessoryList',
    },
    starPowers: {
      $ref: '#/definitions/StarPowerList',
    },
    id: {
      type: 'integer',
    },
    rank: {
      type: 'integer',
    },
    trophies: {
      type: 'integer',
    },
    highestTrophies: {
      type: 'integer',
    },
    power: {
      type: 'integer',
    },
    gears: {
      $ref: '#/definitions/GearStatList',
    },
    name: {
      $ref: '#/definitions/JsonLocalizedName',
    },
  },
} as const

export const GearStatListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/GearStat',
  },
} as const

export const GearStatSchema = {
  type: 'object',
  properties: {
    name: {
      $ref: '#/definitions/JsonLocalizedName',
    },
    id: {
      type: 'integer',
    },
    level: {
      type: 'integer',
    },
  },
} as const

export const PlayerClubSchema = {
  type: 'object',
  properties: {
    tag: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
  },
} as const

export const MatchSchema = {
  type: 'object',
  properties: {
    initiativeSide: {
      type: 'integer',
    },
    round: {
      type: 'integer',
    },
    teams: {
      $ref: '#/definitions/MatchTeamList',
    },
    terminationReason: {
      type: 'string',
      enum: [
        'none',
        'playerDisconnected',
        'playerNotResponding',
        'technicalError',
        'matchTooLong',
        'other',
      ],
    },
    games: {
      $ref: '#/definitions/CompletedGameList',
    },
    phase: {
      type: 'string',
      enum: [
        'init',
        'banHeroes',
        'pickHeroes',
        'finalPreparation',
        'battle',
        'matchResult',
        'ending',
      ],
    },
    players: {
      $ref: '#/definitions/PlayerMatchStatusList',
    },
    state: {
      type: 'string',
      enum: ['open', 'cancelled', 'completed'],
    },
    id: {
      type: 'string',
    },
  },
} as const

export const PlayerMatchStatusListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/PlayerMatchStatus',
  },
} as const

export const PlayerMatchStatusSchema = {
  type: 'object',
  properties: {
    brawler: {
      $ref: '#/definitions/BrawlerInfo',
    },
    isOnline: {
      type: 'boolean',
    },
    hasJoined: {
      type: 'boolean',
    },
    isReady: {
      type: 'boolean',
    },
    isInBattle: {
      type: 'boolean',
    },
    tag: {
      type: 'string',
    },
  },
} as const

export const BrawlerInfoSchema = {
  type: 'object',
  properties: {
    gears: {
      $ref: '#/definitions/GearInfoList',
    },
    starPower: {
      $ref: '#/definitions/StarPower',
    },
    gadget: {
      $ref: '#/definitions/Accessory',
    },
    power: {
      type: 'integer',
    },
    trophies: {
      type: 'integer',
    },
    trophyChange: {
      type: 'integer',
    },
    name: {
      $ref: '#/definitions/JsonLocalizedName',
    },
    id: {
      type: 'integer',
    },
  },
} as const

export const GearInfoListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/GearInfo',
  },
} as const

export const GearInfoSchema = {
  type: 'object',
  properties: {
    name: {
      $ref: '#/definitions/JsonLocalizedName',
    },
    id: {
      type: 'integer',
    },
    level: {
      type: 'integer',
    },
  },
} as const

export const CompletedGameListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/CompletedGame',
  },
} as const

export const CompletedGameSchema = {
  type: 'object',
  properties: {
    teams: {
      $ref: '#/definitions/CompletedGameTeamList',
    },
    duration: {
      type: 'integer',
    },
    location: {
      $ref: '#/definitions/MatchLocation',
    },
    replayId: {
      type: 'string',
    },
  },
} as const

export const CompletedGameTeamListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/CompletedGameTeam',
  },
} as const

export const CompletedGameTeamSchema = {
  type: 'object',
  properties: {
    score: {
      type: 'integer',
    },
    isWinner: {
      type: 'boolean',
    },
    siege: {
      $ref: '#/definitions/SiegeStats',
    },
    players: {
      $ref: '#/definitions/PlayerEntryCompletedGameList',
    },
  },
} as const

export const PlayerEntryCompletedGameListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/PlayerEntryCompletedGame',
  },
} as const

export const PlayerEntryCompletedGameSchema = {
  type: 'object',
  properties: {
    brawler: {
      $ref: '#/definitions/BrawlerInfo',
    },
    statistics: {
      $ref: '#/definitions/Stats',
    },
    tag: {
      type: 'string',
    },
    accountId: {
      type: 'string',
    },
  },
} as const

export const StatsSchema = {
  type: 'object',
  properties: {
    objectivesStolen: {
      type: 'integer',
    },
    brawlBallShotsOnGoal: {
      type: 'integer',
    },
    brawlBallShotsSaved: {
      type: 'integer',
    },
    gemGrabGemsCollected: {
      type: 'integer',
    },
    gemGrabGemsLost: {
      type: 'integer',
    },
    bountyStarsGained: {
      type: 'integer',
    },
    bountyStarsLost: {
      type: 'integer',
    },
    superUsedCount: {
      type: 'integer',
    },
    gadgetUsedCount: {
      type: 'integer',
    },
    bountyPickedMiddleStar: {
      type: 'boolean',
    },
    matchEndKillStreak: {
      type: 'integer',
    },
    maxKillStreak: {
      type: 'integer',
    },
    hotZoneInsideZonePercentage: {
      type: 'integer',
    },
    healingDoneToSelf: {
      type: 'integer',
    },
    healingDoneToTeamMates: {
      type: 'integer',
    },
    objectivesRecovered: {
      type: 'integer',
    },
    healingDone: {
      type: 'integer',
    },
    deaths: {
      type: 'integer',
    },
    damageDealt: {
      type: 'integer',
    },
    kills: {
      type: 'integer',
    },
    averageLatency: {
      type: 'integer',
    },
    damageReceived: {
      type: 'integer',
    },
    totalDamageToSafe: {
      type: 'integer',
    },
    totalDamageToPets: {
      type: 'integer',
    },
    siegeDamageToRobot: {
      type: 'integer',
    },
    siegeBoltsCollected: {
      type: 'integer',
    },
    brawlBallGoalsScored: {
      type: 'integer',
    },
  },
} as const

export const SiegeStatsSchema = {
  type: 'object',
  properties: {
    botDamageToBase: {
      type: 'integer',
    },
    botLevelByRound: {
      type: 'list',
    },
  },
} as const

export const MatchTeamListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/MatchTeam',
  },
} as const

export const MatchTeamSchema = {
  type: 'object',
  properties: {
    players: {
      $ref: '#/definitions/MatchTeamPlayerList',
    },
    bans: {
      $ref: '#/definitions/BrawlerInfoList',
    },
    side: {
      type: 'integer',
    },
  },
} as const

export const BrawlerInfoListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/BrawlerInfo',
  },
} as const

export const MatchTeamPlayerListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/MatchTeamPlayer',
  },
} as const

export const MatchTeamPlayerSchema = {
  type: 'object',
  properties: {
    causedTermination: {
      type: 'boolean',
    },
    tag: {
      type: 'string',
    },
    isLeader: {
      type: 'boolean',
    },
    brawler: {
      $ref: '#/definitions/BrawlerInfo',
    },
  },
} as const

export const CancelMatchResponseSchema = {
  type: 'object',
  properties: {
    success: {
      type: 'boolean',
    },
  },
} as const

export const BattleListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/Battle',
  },
} as const

export const BattleSchema = {
  type: 'object',
  properties: {
    battle: {
      $ref: '#/definitions/BattleResult',
    },
    battleTime: {
      type: 'string',
    },
    event: {
      $ref: '#/definitions/Event',
    },
  },
} as const

export const EventSchema = {
  type: 'object',
  properties: {
    mode: {
      type: 'string',
      enum: [
        'soloShowdown',
        'duoShowdown',
        'heist',
        'bounty',
        'siege',
        'gemGrab',
        'brawlBall',
        'bigGame',
        'bossFight',
        'roboRumble',
        'takedown',
        'loneStar',
        'presentPlunder',
        'hotZone',
        'superCityRampage',
        'knockout',
        'volleyBrawl',
        'basketBrawl',
        'holdTheTrophy',
        'trophyThieves',
        'duels',
        'wipeout',
        'payload',
        'botDrop',
        'hunters',
        'lastStand',
        'snowtelThieves',
        'pumpkinPlunder',
        'trophyEscape',
        'wipeout5V5',
        'knockout5V5',
        'gemGrab5V5',
        'brawlBall5V5',
        'godzillaCitySmash',
        'paintBrawl',
        'trioShowdown',
        'zombiePlunder',
        'jellyfishing',
        'unknown',
      ],
    },
    id: {
      type: 'integer',
    },
    map: {
      $ref: '#/definitions/JsonLocalizedName',
    },
  },
} as const

export const BattleResultSchema = {
  type: 'object',
} as const

export const BrawlerListSchema = {
  type: 'array',
  items: {
    $ref: '#/definitions/Brawler',
  },
} as const

export const ClientErrorSchema = {
  type: 'object',
  properties: {
    reason: {
      type: 'string',
    },
    message: {
      type: 'string',
    },
    type: {
      type: 'string',
    },
    detail: {
      type: 'object',
    },
  },
} as const


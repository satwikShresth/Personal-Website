/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayerRouteImport } from './routes/_layer'
import { Route as LayerIndexRouteImport } from './routes/_layer/index'
import { Route as LayerResumeRouteImport } from './routes/_layer/resume'
import { Route as LayerProjectsRouteImport } from './routes/_layer/projects'
import { Route as LayerPhotographyRouteImport } from './routes/_layer/photography'
import { Route as LayerHomeRouteImport } from './routes/_layer/home'
import { Route as LayerExperienceRouteImport } from './routes/_layer/experience'
import { Route as LayerActivityRouteImport } from './routes/_layer/activity'
import { Route as LayerActivityIndexRouteImport } from './routes/_layer/activity/index'
import { Route as LayerActivityPostRouteImport } from './routes/_layer/activity/$post'

const LayerRoute = LayerRouteImport.update({
  id: '/_layer',
  getParentRoute: () => rootRouteImport,
} as any)
const LayerIndexRoute = LayerIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayerRoute,
} as any)
const LayerResumeRoute = LayerResumeRouteImport.update({
  id: '/resume',
  path: '/resume',
  getParentRoute: () => LayerRoute,
} as any)
const LayerProjectsRoute = LayerProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => LayerRoute,
} as any)
const LayerPhotographyRoute = LayerPhotographyRouteImport.update({
  id: '/photography',
  path: '/photography',
  getParentRoute: () => LayerRoute,
} as any)
const LayerHomeRoute = LayerHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => LayerRoute,
} as any)
const LayerExperienceRoute = LayerExperienceRouteImport.update({
  id: '/experience',
  path: '/experience',
  getParentRoute: () => LayerRoute,
} as any)
const LayerActivityRoute = LayerActivityRouteImport.update({
  id: '/activity',
  path: '/activity',
  getParentRoute: () => LayerRoute,
} as any)
const LayerActivityIndexRoute = LayerActivityIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayerActivityRoute,
} as any)
const LayerActivityPostRoute = LayerActivityPostRouteImport.update({
  id: '/$post',
  path: '/$post',
  getParentRoute: () => LayerActivityRoute,
} as any)

export interface FileRoutesByFullPath {
  '/activity': typeof LayerActivityRouteWithChildren
  '/experience': typeof LayerExperienceRoute
  '/home': typeof LayerHomeRoute
  '/photography': typeof LayerPhotographyRoute
  '/projects': typeof LayerProjectsRoute
  '/resume': typeof LayerResumeRoute
  '/': typeof LayerIndexRoute
  '/activity/$post': typeof LayerActivityPostRoute
  '/activity/': typeof LayerActivityIndexRoute
}
export interface FileRoutesByTo {
  '/experience': typeof LayerExperienceRoute
  '/home': typeof LayerHomeRoute
  '/photography': typeof LayerPhotographyRoute
  '/projects': typeof LayerProjectsRoute
  '/resume': typeof LayerResumeRoute
  '/': typeof LayerIndexRoute
  '/activity/$post': typeof LayerActivityPostRoute
  '/activity': typeof LayerActivityIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layer': typeof LayerRouteWithChildren
  '/_layer/activity': typeof LayerActivityRouteWithChildren
  '/_layer/experience': typeof LayerExperienceRoute
  '/_layer/home': typeof LayerHomeRoute
  '/_layer/photography': typeof LayerPhotographyRoute
  '/_layer/projects': typeof LayerProjectsRoute
  '/_layer/resume': typeof LayerResumeRoute
  '/_layer/': typeof LayerIndexRoute
  '/_layer/activity/$post': typeof LayerActivityPostRoute
  '/_layer/activity/': typeof LayerActivityIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/activity'
    | '/experience'
    | '/home'
    | '/photography'
    | '/projects'
    | '/resume'
    | '/'
    | '/activity/$post'
    | '/activity/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/experience'
    | '/home'
    | '/photography'
    | '/projects'
    | '/resume'
    | '/'
    | '/activity/$post'
    | '/activity'
  id:
    | '__root__'
    | '/_layer'
    | '/_layer/activity'
    | '/_layer/experience'
    | '/_layer/home'
    | '/_layer/photography'
    | '/_layer/projects'
    | '/_layer/resume'
    | '/_layer/'
    | '/_layer/activity/$post'
    | '/_layer/activity/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayerRoute: typeof LayerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layer': {
      id: '/_layer'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layer/': {
      id: '/_layer/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayerIndexRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/resume': {
      id: '/_layer/resume'
      path: '/resume'
      fullPath: '/resume'
      preLoaderRoute: typeof LayerResumeRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/projects': {
      id: '/_layer/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof LayerProjectsRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/photography': {
      id: '/_layer/photography'
      path: '/photography'
      fullPath: '/photography'
      preLoaderRoute: typeof LayerPhotographyRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/home': {
      id: '/_layer/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof LayerHomeRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/experience': {
      id: '/_layer/experience'
      path: '/experience'
      fullPath: '/experience'
      preLoaderRoute: typeof LayerExperienceRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/activity': {
      id: '/_layer/activity'
      path: '/activity'
      fullPath: '/activity'
      preLoaderRoute: typeof LayerActivityRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/activity/': {
      id: '/_layer/activity/'
      path: '/'
      fullPath: '/activity/'
      preLoaderRoute: typeof LayerActivityIndexRouteImport
      parentRoute: typeof LayerActivityRoute
    }
    '/_layer/activity/$post': {
      id: '/_layer/activity/$post'
      path: '/$post'
      fullPath: '/activity/$post'
      preLoaderRoute: typeof LayerActivityPostRouteImport
      parentRoute: typeof LayerActivityRoute
    }
  }
}

interface LayerActivityRouteChildren {
  LayerActivityPostRoute: typeof LayerActivityPostRoute
  LayerActivityIndexRoute: typeof LayerActivityIndexRoute
}

const LayerActivityRouteChildren: LayerActivityRouteChildren = {
  LayerActivityPostRoute: LayerActivityPostRoute,
  LayerActivityIndexRoute: LayerActivityIndexRoute,
}

const LayerActivityRouteWithChildren = LayerActivityRoute._addFileChildren(
  LayerActivityRouteChildren,
)

interface LayerRouteChildren {
  LayerActivityRoute: typeof LayerActivityRouteWithChildren
  LayerExperienceRoute: typeof LayerExperienceRoute
  LayerHomeRoute: typeof LayerHomeRoute
  LayerPhotographyRoute: typeof LayerPhotographyRoute
  LayerProjectsRoute: typeof LayerProjectsRoute
  LayerResumeRoute: typeof LayerResumeRoute
  LayerIndexRoute: typeof LayerIndexRoute
}

const LayerRouteChildren: LayerRouteChildren = {
  LayerActivityRoute: LayerActivityRouteWithChildren,
  LayerExperienceRoute: LayerExperienceRoute,
  LayerHomeRoute: LayerHomeRoute,
  LayerPhotographyRoute: LayerPhotographyRoute,
  LayerProjectsRoute: LayerProjectsRoute,
  LayerResumeRoute: LayerResumeRoute,
  LayerIndexRoute: LayerIndexRoute,
}

const LayerRouteWithChildren = LayerRoute._addFileChildren(LayerRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayerRoute: LayerRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}

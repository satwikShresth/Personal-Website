/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as LayerRouteImport } from './routes/_layer';
import { Route as LayerIndexRouteImport } from './routes/_layer/index';
import { Route as ApiSplatRouteImport } from './routes/api/$';
import { Route as LayerWriteupsRouteImport } from './routes/_layer/writeups';
import { Route as LayerResumeRouteImport } from './routes/_layer/resume';
import { Route as LayerProjectsRouteImport } from './routes/_layer/projects';
import { Route as LayerPhotographyRouteImport } from './routes/_layer/photography';
import { Route as LayerExperienceRouteImport } from './routes/_layer/experience';
import { Route as LayerActivityRouteImport } from './routes/_layer/activity';
import { Route as LayerWriteupsIndexRouteImport } from './routes/_layer/writeups/index';
import { Route as ApiRpcSplatRouteImport } from './routes/api/rpc.$';
import { Route as LayerWriteupsPostRouteImport } from './routes/_layer/writeups/$post';

const LayerRoute = LayerRouteImport.update({
   id: '/_layer',
   getParentRoute: () => rootRouteImport
} as any);
const LayerIndexRoute = LayerIndexRouteImport.update({
   id: '/',
   path: '/',
   getParentRoute: () => LayerRoute
} as any);
const ApiSplatRoute = ApiSplatRouteImport.update({
   id: '/api/$',
   path: '/api/$',
   getParentRoute: () => rootRouteImport
} as any);
const LayerWriteupsRoute = LayerWriteupsRouteImport.update({
   id: '/writeups',
   path: '/writeups',
   getParentRoute: () => LayerRoute
} as any);
const LayerResumeRoute = LayerResumeRouteImport.update({
   id: '/resume',
   path: '/resume',
   getParentRoute: () => LayerRoute
} as any);
const LayerProjectsRoute = LayerProjectsRouteImport.update({
   id: '/projects',
   path: '/projects',
   getParentRoute: () => LayerRoute
} as any);
const LayerPhotographyRoute = LayerPhotographyRouteImport.update({
   id: '/photography',
   path: '/photography',
   getParentRoute: () => LayerRoute
} as any);
const LayerExperienceRoute = LayerExperienceRouteImport.update({
   id: '/experience',
   path: '/experience',
   getParentRoute: () => LayerRoute
} as any);
const LayerActivityRoute = LayerActivityRouteImport.update({
   id: '/activity',
   path: '/activity',
   getParentRoute: () => LayerRoute
} as any);
const LayerWriteupsIndexRoute = LayerWriteupsIndexRouteImport.update({
   id: '/',
   path: '/',
   getParentRoute: () => LayerWriteupsRoute
} as any);
const ApiRpcSplatRoute = ApiRpcSplatRouteImport.update({
   id: '/api/rpc/$',
   path: '/api/rpc/$',
   getParentRoute: () => rootRouteImport
} as any);
const LayerWriteupsPostRoute = LayerWriteupsPostRouteImport.update({
   id: '/$post',
   path: '/$post',
   getParentRoute: () => LayerWriteupsRoute
} as any);

export interface FileRoutesByFullPath {
   '/activity': typeof LayerActivityRoute;
   '/experience': typeof LayerExperienceRoute;
   '/photography': typeof LayerPhotographyRoute;
   '/projects': typeof LayerProjectsRoute;
   '/resume': typeof LayerResumeRoute;
   '/writeups': typeof LayerWriteupsRouteWithChildren;
   '/api/$': typeof ApiSplatRoute;
   '/': typeof LayerIndexRoute;
   '/writeups/$post': typeof LayerWriteupsPostRoute;
   '/api/rpc/$': typeof ApiRpcSplatRoute;
   '/writeups/': typeof LayerWriteupsIndexRoute;
}
export interface FileRoutesByTo {
   '/activity': typeof LayerActivityRoute;
   '/experience': typeof LayerExperienceRoute;
   '/photography': typeof LayerPhotographyRoute;
   '/projects': typeof LayerProjectsRoute;
   '/resume': typeof LayerResumeRoute;
   '/api/$': typeof ApiSplatRoute;
   '/': typeof LayerIndexRoute;
   '/writeups/$post': typeof LayerWriteupsPostRoute;
   '/api/rpc/$': typeof ApiRpcSplatRoute;
   '/writeups': typeof LayerWriteupsIndexRoute;
}
export interface FileRoutesById {
   __root__: typeof rootRouteImport;
   '/_layer': typeof LayerRouteWithChildren;
   '/_layer/activity': typeof LayerActivityRoute;
   '/_layer/experience': typeof LayerExperienceRoute;
   '/_layer/photography': typeof LayerPhotographyRoute;
   '/_layer/projects': typeof LayerProjectsRoute;
   '/_layer/resume': typeof LayerResumeRoute;
   '/_layer/writeups': typeof LayerWriteupsRouteWithChildren;
   '/api/$': typeof ApiSplatRoute;
   '/_layer/': typeof LayerIndexRoute;
   '/_layer/writeups/$post': typeof LayerWriteupsPostRoute;
   '/api/rpc/$': typeof ApiRpcSplatRoute;
   '/_layer/writeups/': typeof LayerWriteupsIndexRoute;
}
export interface FileRouteTypes {
   fileRoutesByFullPath: FileRoutesByFullPath;
   fullPaths:
      | '/activity'
      | '/experience'
      | '/photography'
      | '/projects'
      | '/resume'
      | '/writeups'
      | '/api/$'
      | '/'
      | '/writeups/$post'
      | '/api/rpc/$'
      | '/writeups/';
   fileRoutesByTo: FileRoutesByTo;
   to:
      | '/activity'
      | '/experience'
      | '/photography'
      | '/projects'
      | '/resume'
      | '/api/$'
      | '/'
      | '/writeups/$post'
      | '/api/rpc/$'
      | '/writeups';
   id:
      | '__root__'
      | '/_layer'
      | '/_layer/activity'
      | '/_layer/experience'
      | '/_layer/photography'
      | '/_layer/projects'
      | '/_layer/resume'
      | '/_layer/writeups'
      | '/api/$'
      | '/_layer/'
      | '/_layer/writeups/$post'
      | '/api/rpc/$'
      | '/_layer/writeups/';
   fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
   LayerRoute: typeof LayerRouteWithChildren;
   ApiSplatRoute: typeof ApiSplatRoute;
   ApiRpcSplatRoute: typeof ApiRpcSplatRoute;
}

declare module '@tanstack/react-router' {
   interface FileRoutesByPath {
      '/_layer': {
         id: '/_layer';
         path: '';
         fullPath: '';
         preLoaderRoute: typeof LayerRouteImport;
         parentRoute: typeof rootRouteImport;
      };
      '/_layer/': {
         id: '/_layer/';
         path: '/';
         fullPath: '/';
         preLoaderRoute: typeof LayerIndexRouteImport;
         parentRoute: typeof LayerRoute;
      };
      '/api/$': {
         id: '/api/$';
         path: '/api/$';
         fullPath: '/api/$';
         preLoaderRoute: typeof ApiSplatRouteImport;
         parentRoute: typeof rootRouteImport;
      };
      '/_layer/writeups': {
         id: '/_layer/writeups';
         path: '/writeups';
         fullPath: '/writeups';
         preLoaderRoute: typeof LayerWriteupsRouteImport;
         parentRoute: typeof LayerRoute;
      };
      '/_layer/resume': {
         id: '/_layer/resume';
         path: '/resume';
         fullPath: '/resume';
         preLoaderRoute: typeof LayerResumeRouteImport;
         parentRoute: typeof LayerRoute;
      };
      '/_layer/projects': {
         id: '/_layer/projects';
         path: '/projects';
         fullPath: '/projects';
         preLoaderRoute: typeof LayerProjectsRouteImport;
         parentRoute: typeof LayerRoute;
      };
      '/_layer/photography': {
         id: '/_layer/photography';
         path: '/photography';
         fullPath: '/photography';
         preLoaderRoute: typeof LayerPhotographyRouteImport;
         parentRoute: typeof LayerRoute;
      };
      '/_layer/experience': {
         id: '/_layer/experience';
         path: '/experience';
         fullPath: '/experience';
         preLoaderRoute: typeof LayerExperienceRouteImport;
         parentRoute: typeof LayerRoute;
      };
      '/_layer/activity': {
         id: '/_layer/activity';
         path: '/activity';
         fullPath: '/activity';
         preLoaderRoute: typeof LayerActivityRouteImport;
         parentRoute: typeof LayerRoute;
      };
      '/_layer/writeups/': {
         id: '/_layer/writeups/';
         path: '/';
         fullPath: '/writeups/';
         preLoaderRoute: typeof LayerWriteupsIndexRouteImport;
         parentRoute: typeof LayerWriteupsRoute;
      };
      '/api/rpc/$': {
         id: '/api/rpc/$';
         path: '/api/rpc/$';
         fullPath: '/api/rpc/$';
         preLoaderRoute: typeof ApiRpcSplatRouteImport;
         parentRoute: typeof rootRouteImport;
      };
      '/_layer/writeups/$post': {
         id: '/_layer/writeups/$post';
         path: '/$post';
         fullPath: '/writeups/$post';
         preLoaderRoute: typeof LayerWriteupsPostRouteImport;
         parentRoute: typeof LayerWriteupsRoute;
      };
   }
}

interface LayerWriteupsRouteChildren {
   LayerWriteupsPostRoute: typeof LayerWriteupsPostRoute;
   LayerWriteupsIndexRoute: typeof LayerWriteupsIndexRoute;
}

const LayerWriteupsRouteChildren: LayerWriteupsRouteChildren = {
   LayerWriteupsPostRoute: LayerWriteupsPostRoute,
   LayerWriteupsIndexRoute: LayerWriteupsIndexRoute
};

const LayerWriteupsRouteWithChildren = LayerWriteupsRoute._addFileChildren(
   LayerWriteupsRouteChildren
);

interface LayerRouteChildren {
   LayerActivityRoute: typeof LayerActivityRoute;
   LayerExperienceRoute: typeof LayerExperienceRoute;
   LayerPhotographyRoute: typeof LayerPhotographyRoute;
   LayerProjectsRoute: typeof LayerProjectsRoute;
   LayerResumeRoute: typeof LayerResumeRoute;
   LayerWriteupsRoute: typeof LayerWriteupsRouteWithChildren;
   LayerIndexRoute: typeof LayerIndexRoute;
}

const LayerRouteChildren: LayerRouteChildren = {
   LayerActivityRoute: LayerActivityRoute,
   LayerExperienceRoute: LayerExperienceRoute,
   LayerPhotographyRoute: LayerPhotographyRoute,
   LayerProjectsRoute: LayerProjectsRoute,
   LayerResumeRoute: LayerResumeRoute,
   LayerWriteupsRoute: LayerWriteupsRouteWithChildren,
   LayerIndexRoute: LayerIndexRoute
};

const LayerRouteWithChildren = LayerRoute._addFileChildren(LayerRouteChildren);

const rootRouteChildren: RootRouteChildren = {
   LayerRoute: LayerRouteWithChildren,
   ApiSplatRoute: ApiSplatRoute,
   ApiRpcSplatRoute: ApiRpcSplatRoute
};
export const routeTree = rootRouteImport
   ._addFileChildren(rootRouteChildren)
   ._addFileTypes<FileRouteTypes>();

import type { getRouter } from './router.tsx';
import type { startInstance } from './start.ts';
declare module '@tanstack/react-start' {
   interface Register {
      ssr: true;
      router: Awaited<ReturnType<typeof getRouter>>;
      config: Awaited<ReturnType<typeof startInstance.getOptions>>;
   }
}

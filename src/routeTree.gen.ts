/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayerRouteImport } from './routes/_layer'
import { Route as LayerIndexRouteImport } from './routes/_layer/index'
import { Route as LayerResumeRouteImport } from './routes/_layer/resume'
import { Route as LayerProjectsRouteImport } from './routes/_layer/projects'
import { Route as LayerPhotographyRouteImport } from './routes/_layer/photography'
import { Route as LayerHomeRouteImport } from './routes/_layer/home'
import { Route as LayerExperienceRouteImport } from './routes/_layer/experience'
import { Route as LayerBlogRouteImport } from './routes/_layer/blog'
import { Route as LayerBlogIndexRouteImport } from './routes/_layer/blog/index'
import { Route as LayerBlogPostRouteImport } from './routes/_layer/blog/$post'

const LayerRoute = LayerRouteImport.update({
  id: '/_layer',
  getParentRoute: () => rootRouteImport,
} as any)
const LayerIndexRoute = LayerIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayerRoute,
} as any)
const LayerResumeRoute = LayerResumeRouteImport.update({
  id: '/resume',
  path: '/resume',
  getParentRoute: () => LayerRoute,
} as any)
const LayerProjectsRoute = LayerProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => LayerRoute,
} as any)
const LayerPhotographyRoute = LayerPhotographyRouteImport.update({
  id: '/photography',
  path: '/photography',
  getParentRoute: () => LayerRoute,
} as any)
const LayerHomeRoute = LayerHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => LayerRoute,
} as any)
const LayerExperienceRoute = LayerExperienceRouteImport.update({
  id: '/experience',
  path: '/experience',
  getParentRoute: () => LayerRoute,
} as any)
const LayerBlogRoute = LayerBlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => LayerRoute,
} as any)
const LayerBlogIndexRoute = LayerBlogIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayerBlogRoute,
} as any)
const LayerBlogPostRoute = LayerBlogPostRouteImport.update({
  id: '/$post',
  path: '/$post',
  getParentRoute: () => LayerBlogRoute,
} as any)

export interface FileRoutesByFullPath {
  '/blog': typeof LayerBlogRouteWithChildren
  '/experience': typeof LayerExperienceRoute
  '/home': typeof LayerHomeRoute
  '/photography': typeof LayerPhotographyRoute
  '/projects': typeof LayerProjectsRoute
  '/resume': typeof LayerResumeRoute
  '/': typeof LayerIndexRoute
  '/blog/$post': typeof LayerBlogPostRoute
  '/blog/': typeof LayerBlogIndexRoute
}
export interface FileRoutesByTo {
  '/experience': typeof LayerExperienceRoute
  '/home': typeof LayerHomeRoute
  '/photography': typeof LayerPhotographyRoute
  '/projects': typeof LayerProjectsRoute
  '/resume': typeof LayerResumeRoute
  '/': typeof LayerIndexRoute
  '/blog/$post': typeof LayerBlogPostRoute
  '/blog': typeof LayerBlogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layer': typeof LayerRouteWithChildren
  '/_layer/blog': typeof LayerBlogRouteWithChildren
  '/_layer/experience': typeof LayerExperienceRoute
  '/_layer/home': typeof LayerHomeRoute
  '/_layer/photography': typeof LayerPhotographyRoute
  '/_layer/projects': typeof LayerProjectsRoute
  '/_layer/resume': typeof LayerResumeRoute
  '/_layer/': typeof LayerIndexRoute
  '/_layer/blog/$post': typeof LayerBlogPostRoute
  '/_layer/blog/': typeof LayerBlogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/blog'
    | '/experience'
    | '/home'
    | '/photography'
    | '/projects'
    | '/resume'
    | '/'
    | '/blog/$post'
    | '/blog/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/experience'
    | '/home'
    | '/photography'
    | '/projects'
    | '/resume'
    | '/'
    | '/blog/$post'
    | '/blog'
  id:
    | '__root__'
    | '/_layer'
    | '/_layer/blog'
    | '/_layer/experience'
    | '/_layer/home'
    | '/_layer/photography'
    | '/_layer/projects'
    | '/_layer/resume'
    | '/_layer/'
    | '/_layer/blog/$post'
    | '/_layer/blog/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayerRoute: typeof LayerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layer': {
      id: '/_layer'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layer/': {
      id: '/_layer/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayerIndexRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/resume': {
      id: '/_layer/resume'
      path: '/resume'
      fullPath: '/resume'
      preLoaderRoute: typeof LayerResumeRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/projects': {
      id: '/_layer/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof LayerProjectsRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/photography': {
      id: '/_layer/photography'
      path: '/photography'
      fullPath: '/photography'
      preLoaderRoute: typeof LayerPhotographyRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/home': {
      id: '/_layer/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof LayerHomeRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/experience': {
      id: '/_layer/experience'
      path: '/experience'
      fullPath: '/experience'
      preLoaderRoute: typeof LayerExperienceRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/blog': {
      id: '/_layer/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof LayerBlogRouteImport
      parentRoute: typeof LayerRoute
    }
    '/_layer/blog/': {
      id: '/_layer/blog/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof LayerBlogIndexRouteImport
      parentRoute: typeof LayerBlogRoute
    }
    '/_layer/blog/$post': {
      id: '/_layer/blog/$post'
      path: '/$post'
      fullPath: '/blog/$post'
      preLoaderRoute: typeof LayerBlogPostRouteImport
      parentRoute: typeof LayerBlogRoute
    }
  }
}

interface LayerBlogRouteChildren {
  LayerBlogPostRoute: typeof LayerBlogPostRoute
  LayerBlogIndexRoute: typeof LayerBlogIndexRoute
}

const LayerBlogRouteChildren: LayerBlogRouteChildren = {
  LayerBlogPostRoute: LayerBlogPostRoute,
  LayerBlogIndexRoute: LayerBlogIndexRoute,
}

const LayerBlogRouteWithChildren = LayerBlogRoute._addFileChildren(
  LayerBlogRouteChildren,
)

interface LayerRouteChildren {
  LayerBlogRoute: typeof LayerBlogRouteWithChildren
  LayerExperienceRoute: typeof LayerExperienceRoute
  LayerHomeRoute: typeof LayerHomeRoute
  LayerPhotographyRoute: typeof LayerPhotographyRoute
  LayerProjectsRoute: typeof LayerProjectsRoute
  LayerResumeRoute: typeof LayerResumeRoute
  LayerIndexRoute: typeof LayerIndexRoute
}

const LayerRouteChildren: LayerRouteChildren = {
  LayerBlogRoute: LayerBlogRouteWithChildren,
  LayerExperienceRoute: LayerExperienceRoute,
  LayerHomeRoute: LayerHomeRoute,
  LayerPhotographyRoute: LayerPhotographyRoute,
  LayerProjectsRoute: LayerProjectsRoute,
  LayerResumeRoute: LayerResumeRoute,
  LayerIndexRoute: LayerIndexRoute,
}

const LayerRouteWithChildren = LayerRoute._addFileChildren(LayerRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayerRoute: LayerRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}

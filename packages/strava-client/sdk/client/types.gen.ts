// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
   baseURL: 'https://www.strava.com/api/v3' | (string & {});
};

/**
 * A set of rolled-up statistics and totals for an athlete
 */
export type ActivityStats = {
   /**
    * The longest distance ridden by the athlete.
    */
   biggest_ride_distance?: number;
   /**
    * The highest climb ridden by the athlete.
    */
   biggest_climb_elevation_gain?: number;
   recent_ride_totals?: ActivityTotal;
   recent_run_totals?: ActivityTotal;
   recent_swim_totals?: ActivityTotal;
   ytd_ride_totals?: ActivityTotal;
   ytd_run_totals?: ActivityTotal;
   ytd_swim_totals?: ActivityTotal;
   all_ride_totals?: ActivityTotal;
   all_run_totals?: ActivityTotal;
   all_swim_totals?: ActivityTotal;
};

/**
 * A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
 */
export type ActivityTotal = {
   /**
    * The number of activities considered in this total.
    */
   count?: number;
   /**
    * The total distance covered by the considered activities.
    */
   distance?: number;
   /**
    * The total moving time of the considered activities.
    */
   moving_time?: number;
   /**
    * The total elapsed time of the considered activities.
    */
   elapsed_time?: number;
   /**
    * The total elevation gain of the considered activities.
    */
   elevation_gain?: number;
   /**
    * The total number of achievements of the considered activities.
    */
   achievement_count?: number;
};

/**
 * Encapsulates the errors that may be returned from the API.
 */
export type Fault = {
   /**
    * The set of specific errors associated with this fault, if any.
    */
   errors?: Array<_Error>;
   /**
    * The message of the fault.
    */
   message?: string;
};

export type _Error = {
   /**
    * The code associated with this error.
    */
   code?: string;
   /**
    * The specific field or aspect of the resource associated with this error.
    */
   field?: string;
   /**
    * The type of resource associated with this error.
    */
   resource?: string;
};

export type DetailedAthlete = SummaryAthlete & {
   /**
    * The athlete's follower count.
    */
   follower_count?: number;
   /**
    * The athlete's friend count.
    */
   friend_count?: number;
   /**
    * The athlete's preferred unit system.
    */
   measurement_preference?: 'feet' | 'meters';
   /**
    * The athlete's FTP (Functional Threshold Power).
    */
   ftp?: number;
   /**
    * The athlete's weight.
    */
   weight?: number;
   /**
    * The athlete's clubs.
    */
   clubs?: Array<SummaryClub>;
   /**
    * The athlete's bikes.
    */
   bikes?: Array<SummaryGear>;
   /**
    * The athlete's shoes.
    */
   shoes?: Array<SummaryGear>;
};

export type SummaryAthlete = MetaAthlete & {
   /**
    * Resource state, indicates level of detail. Possible values: 1 -> "meta", 2 -> "summary", 3 -> "detail"
    */
   resource_state?: number;
   /**
    * The athlete's first name.
    */
   firstname?: string;
   /**
    * The athlete's last name.
    */
   lastname?: string;
   /**
    * URL to a 62x62 pixel profile picture.
    */
   profile_medium?: string;
   /**
    * URL to a 124x124 pixel profile picture.
    */
   profile?: string;
   /**
    * The athlete's city.
    */
   city?: string;
   /**
    * The athlete's state or geographical region.
    */
   state?: string;
   /**
    * The athlete's country.
    */
   country?: string;
   /**
    * The athlete's sex.
    */
   sex?: 'M' | 'F';
   /**
    * Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
    */
   premium?: boolean;
   /**
    * Whether the athlete has any Summit subscription.
    */
   summit?: boolean;
   /**
    * The time at which the athlete was created.
    */
   created_at?: string;
   /**
    * The time at which the athlete was last updated.
    */
   updated_at?: string;
};

export type MetaAthlete = {
   /**
    * The unique identifier of the athlete
    */
   id?: number;
};

export type SummaryClub = MetaClub & {
   /**
    * URL to a 60x60 pixel profile picture.
    */
   profile_medium?: string;
   /**
    * URL to a ~1185x580 pixel cover photo.
    */
   cover_photo?: string;
   /**
    * URL to a ~360x176  pixel cover photo.
    */
   cover_photo_small?: string;
   /**
    * Deprecated. Prefer to use activity_types.
    */
   sport_type?: 'cycling' | 'running' | 'triathlon' | 'other';
   /**
    * The activity types that count for a club. This takes precedence over sport_type.
    */
   activity_types?: Array<ActivityType>;
   /**
    * The club's city.
    */
   city?: string;
   /**
    * The club's state or geographical region.
    */
   state?: string;
   /**
    * The club's country.
    */
   country?: string;
   /**
    * Whether the club is private.
    */
   private?: boolean;
   /**
    * The club's member count.
    */
   member_count?: number;
   /**
    * Whether the club is featured or not.
    */
   featured?: boolean;
   /**
    * Whether the club is verified or not.
    */
   verified?: boolean;
   /**
    * The club's vanity URL.
    */
   url?: string;
};

export type MetaClub = {
   /**
    * The club's unique identifier.
    */
   id?: number;
   /**
    * Resource state, indicates level of detail. Possible values: 1 -> "meta", 2 -> "summary", 3 -> "detail"
    */
   resource_state?: number;
   /**
    * The club's name.
    */
   name?: string;
};

/**
 * An enumeration of the types an activity may have. Note that this enumeration does not include new sport types (e.g. MountainBikeRide, EMountainBikeRide), activities with these sport types will have the corresponding activity type (e.g. Ride for MountainBikeRide, EBikeRide for EMountainBikeRide)
 */
export type ActivityType =
   | 'AlpineSki'
   | 'BackcountrySki'
   | 'Canoeing'
   | 'Crossfit'
   | 'EBikeRide'
   | 'Elliptical'
   | 'Golf'
   | 'Handcycle'
   | 'Hike'
   | 'IceSkate'
   | 'InlineSkate'
   | 'Kayaking'
   | 'Kitesurf'
   | 'NordicSki'
   | 'Ride'
   | 'RockClimbing'
   | 'RollerSki'
   | 'Rowing'
   | 'Run'
   | 'Sail'
   | 'Skateboard'
   | 'Snowboard'
   | 'Snowshoe'
   | 'Soccer'
   | 'StairStepper'
   | 'StandUpPaddling'
   | 'Surfing'
   | 'Swim'
   | 'Velomobile'
   | 'VirtualRide'
   | 'VirtualRun'
   | 'Walk'
   | 'WeightTraining'
   | 'Wheelchair'
   | 'Windsurf'
   | 'Workout'
   | 'Yoga';

export type SummaryGear = {
   /**
    * The gear's unique identifier.
    */
   id?: string;
   /**
    * Resource state, indicates level of detail. Possible values: 2 -> "summary", 3 -> "detail"
    */
   resource_state?: number;
   /**
    * Whether this gear's is the owner's default one.
    */
   primary?: boolean;
   /**
    * The gear's name.
    */
   name?: string;
   /**
    * The distance logged with this gear.
    */
   distance?: number;
};

export type Zones = {
   heart_rate?: HeartRateZoneRanges;
   power?: PowerZoneRanges;
};

export type HeartRateZoneRanges = {
   /**
    * Whether the athlete has set their own custom heart rate zones
    */
   custom_zones?: boolean;
   zones?: ZoneRanges;
};

export type ZoneRanges = Array<ZoneRange>;

export type ZoneRange = {
   /**
    * The minimum value in the range.
    */
   min?: number;
   /**
    * The maximum value in the range.
    */
   max?: number;
};

export type PowerZoneRanges = {
   zones?: ZoneRanges;
};

export type DetailedSegment = SummarySegment & {
   /**
    * The time at which the segment was created.
    */
   created_at?: string;
   /**
    * The time at which the segment was last updated.
    */
   updated_at?: string;
   /**
    * The segment's total elevation gain.
    */
   total_elevation_gain?: number;
   map?: PolylineMap;
   /**
    * The total number of efforts for this segment
    */
   effort_count?: number;
   /**
    * The number of unique athletes who have an effort for this segment
    */
   athlete_count?: number;
   /**
    * Whether this segment is considered hazardous
    */
   hazardous?: boolean;
   /**
    * The number of stars for this segment
    */
   star_count?: number;
};

export type SummarySegment = {
   /**
    * The unique identifier of this segment
    */
   id?: number;
   /**
    * The name of this segment
    */
   name?: string;
   activity_type?: 'Ride' | 'Run';
   /**
    * The segment's distance, in meters
    */
   distance?: number;
   /**
    * The segment's average grade, in percents
    */
   average_grade?: number;
   /**
    * The segments's maximum grade, in percents
    */
   maximum_grade?: number;
   /**
    * The segments's highest elevation, in meters
    */
   elevation_high?: number;
   /**
    * The segments's lowest elevation, in meters
    */
   elevation_low?: number;
   start_latlng?: LatLng;
   end_latlng?: LatLng;
   /**
    * The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category.
    */
   climb_category?: number;
   /**
    * The segments's city.
    */
   city?: string;
   /**
    * The segments's state or geographical region.
    */
   state?: string;
   /**
    * The segment's country.
    */
   country?: string;
   /**
    * Whether this segment is private.
    */
   private?: boolean;
   athlete_pr_effort?: SummaryPrSegmentEffort;
   athlete_segment_stats?: SummarySegmentEffort;
};

/**
 * A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
 */
export type LatLng = [number, number];

export type SummaryPrSegmentEffort = {
   /**
    * The unique identifier of the activity related to the PR effort.
    */
   pr_activity_id?: number;
   /**
    * The elapsed time ot the PR effort.
    */
   pr_elapsed_time?: number;
   /**
    * The time at which the PR effort was started.
    */
   pr_date?: string;
   /**
    * Number of efforts by the authenticated athlete on this segment.
    */
   effort_count?: number;
};

export type SummarySegmentEffort = {
   /**
    * The unique identifier of this effort
    */
   id?: number;
   /**
    * The unique identifier of the activity related to this effort
    */
   activity_id?: number;
   /**
    * The effort's elapsed time
    */
   elapsed_time?: number;
   /**
    * The time at which the effort was started.
    */
   start_date?: string;
   /**
    * The time at which the effort was started in the local timezone.
    */
   start_date_local?: string;
   /**
    * The effort's distance in meters
    */
   distance?: number;
   /**
    * Whether this effort is the current best on the leaderboard
    */
   is_kom?: boolean;
};

export type PolylineMap = {
   /**
    * The identifier of the map
    */
   id?: string;
   /**
    * The polyline of the map, only returned on detailed representation of an object
    */
   polyline?: string;
   /**
    * The summary polyline of the map
    */
   summary_polyline?: string;
};

export type DetailedSegmentEffort = SummarySegmentEffort & {
   /**
    * The name of the segment on which this effort was performed
    */
   name?: string;
   activity?: MetaActivity;
   athlete?: MetaAthlete;
   /**
    * The effort's moving time
    */
   moving_time?: number;
   /**
    * The start index of this effort in its activity's stream
    */
   start_index?: number;
   /**
    * The end index of this effort in its activity's stream
    */
   end_index?: number;
   /**
    * The effort's average cadence
    */
   average_cadence?: number;
   /**
    * The average wattage of this effort
    */
   average_watts?: number;
   /**
    * For riding efforts, whether the wattage was reported by a dedicated recording device
    */
   device_watts?: boolean;
   /**
    * The heart heart rate of the athlete during this effort
    */
   average_heartrate?: number;
   /**
    * The maximum heart rate of the athlete during this effort
    */
   max_heartrate?: number;
   segment?: SummarySegment;
   /**
    * The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload
    */
   kom_rank?: number;
   /**
    * The rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload
    */
   pr_rank?: number;
   /**
    * Whether this effort should be hidden when viewed within an activity
    */
   hidden?: boolean;
};

export type MetaActivity = {
   /**
    * The unique identifier of the activity
    */
   id?: number;
};

export type ExplorerResponse = {
   /**
    * The set of segments matching an explorer request
    */
   segments?: Array<ExplorerSegment>;
};

export type ExplorerSegment = {
   /**
    * The unique identifier of this segment
    */
   id?: number;
   /**
    * The name of this segment
    */
   name?: string;
   /**
    * The category of the climb [0, 5]. Higher is harder ie. 5 is Hors cat√©gorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3.
    */
   climb_category?: number;
   /**
    * The description for the category of the climb
    */
   climb_category_desc?: 'NC' | '4' | '3' | '2' | '1' | 'HC';
   /**
    * The segment's average grade, in percents
    */
   avg_grade?: number;
   start_latlng?: LatLng;
   end_latlng?: LatLng;
   /**
    * The segments's evelation difference, in meters
    */
   elev_difference?: number;
   /**
    * The segment's distance, in meters
    */
   distance?: number;
   /**
    * The polyline of the segment
    */
   points?: string;
};

export type DetailedActivity = SummaryActivity & {
   /**
    * The description of the activity
    */
   description?: string;
   photos?: PhotosSummary;
   gear?: SummaryGear;
   /**
    * The number of kilocalories consumed during this activity
    */
   calories?: number;
   segment_efforts?: Array<DetailedSegmentEffort>;
   /**
    * The name of the device used to record the activity
    */
   device_name?: string;
   /**
    * The token used to embed a Strava activity
    */
   embed_token?: string;
   /**
    * The splits of this activity in metric units (for runs)
    */
   splits_metric?: Array<Split>;
   /**
    * The splits of this activity in imperial units (for runs)
    */
   splits_standard?: Array<Split>;
   laps?: Array<Lap>;
   best_efforts?: Array<DetailedSegmentEffort>;
};

export type SummaryActivity = MetaActivity & {
   /**
    * The identifier provided at upload time
    */
   external_id?: string;
   /**
    * The identifier of the upload that resulted in this activity
    */
   upload_id?: number;
   athlete?: MetaAthlete;
   /**
    * The name of the activity
    */
   name?: string;
   /**
    * The activity's distance, in meters
    */
   distance?: number;
   /**
    * The activity's moving time, in seconds
    */
   moving_time?: number;
   /**
    * The activity's elapsed time, in seconds
    */
   elapsed_time?: number;
   /**
    * The activity's total elevation gain.
    */
   total_elevation_gain?: number;
   /**
    * The activity's highest elevation, in meters
    */
   elev_high?: number;
   /**
    * The activity's lowest elevation, in meters
    */
   elev_low?: number;
   type?: ActivityType;
   sport_type?: SportType;
   /**
    * The time at which the activity was started.
    */
   start_date?: string;
   /**
    * The time at which the activity was started in the local timezone.
    */
   start_date_local?: string;
   /**
    * The timezone of the activity
    */
   timezone?: string;
   start_latlng?: LatLng;
   end_latlng?: LatLng;
   /**
    * The number of achievements gained during this activity
    */
   achievement_count?: number;
   /**
    * The number of kudos given for this activity
    */
   kudos_count?: number;
   /**
    * The number of comments for this activity
    */
   comment_count?: number;
   /**
    * The number of athletes for taking part in a group activity
    */
   athlete_count?: number;
   /**
    * The number of Instagram photos for this activity
    */
   photo_count?: number;
   /**
    * The number of Instagram and Strava photos for this activity
    */
   total_photo_count?: number;
   map?: PolylineMap;
   /**
    * Whether this activity was recorded on a training machine
    */
   trainer?: boolean;
   /**
    * Whether this activity is a commute
    */
   commute?: boolean;
   /**
    * Whether this activity was created manually
    */
   manual?: boolean;
   /**
    * Whether this activity is private
    */
   private?: boolean;
   /**
    * Whether this activity is flagged
    */
   flagged?: boolean;
   /**
    * The activity's workout type
    */
   workout_type?: number;
   /**
    * The unique identifier of the upload in string format
    */
   upload_id_str?: string;
   /**
    * The activity's average speed, in meters per second
    */
   average_speed?: number;
   /**
    * The activity's max speed, in meters per second
    */
   max_speed?: number;
   /**
    * Whether the logged-in athlete has kudoed this activity
    */
   has_kudoed?: boolean;
   /**
    * Whether the activity is muted
    */
   hide_from_home?: boolean;
   /**
    * The id of the gear for the activity
    */
   gear_id?: string;
   /**
    * The total work done in kilojoules during this activity. Rides only
    */
   kilojoules?: number;
   /**
    * Average power output in watts during this activity. Rides only
    */
   average_watts?: number;
   /**
    * Whether the watts are from a power meter, false if estimated
    */
   device_watts?: boolean;
   /**
    * Rides with power meter data only
    */
   max_watts?: number;
   /**
    * Similar to Normalized Power. Rides with power meter data only
    */
   weighted_average_watts?: number;
};

/**
 * An enumeration of the sport types an activity may have. Distinct from ActivityType in that it has new types (e.g. MountainBikeRide)
 */
export type SportType =
   | 'AlpineSki'
   | 'BackcountrySki'
   | 'Badminton'
   | 'Canoeing'
   | 'Crossfit'
   | 'EBikeRide'
   | 'Elliptical'
   | 'EMountainBikeRide'
   | 'Golf'
   | 'GravelRide'
   | 'Handcycle'
   | 'HighIntensityIntervalTraining'
   | 'Hike'
   | 'IceSkate'
   | 'InlineSkate'
   | 'Kayaking'
   | 'Kitesurf'
   | 'MountainBikeRide'
   | 'NordicSki'
   | 'Pickleball'
   | 'Pilates'
   | 'Racquetball'
   | 'Ride'
   | 'RockClimbing'
   | 'RollerSki'
   | 'Rowing'
   | 'Run'
   | 'Sail'
   | 'Skateboard'
   | 'Snowboard'
   | 'Snowshoe'
   | 'Soccer'
   | 'Squash'
   | 'StairStepper'
   | 'StandUpPaddling'
   | 'Surfing'
   | 'Swim'
   | 'TableTennis'
   | 'Tennis'
   | 'TrailRun'
   | 'Velomobile'
   | 'VirtualRide'
   | 'VirtualRow'
   | 'VirtualRun'
   | 'Walk'
   | 'WeightTraining'
   | 'Wheelchair'
   | 'Windsurf'
   | 'Workout'
   | 'Yoga';

export type PhotosSummary = {
   /**
    * The number of photos
    */
   count?: number;
   primary?: {
      id?: number;
      source?: number;
      unique_id?: string;
      urls?: {
         [key: string]: string;
      };
   };
};

export type Split = {
   /**
    * The average speed of this split, in meters per second
    */
   average_speed?: number;
   /**
    * The distance of this split, in meters
    */
   distance?: number;
   /**
    * The elapsed time of this split, in seconds
    */
   elapsed_time?: number;
   /**
    * The elevation difference of this split, in meters
    */
   elevation_difference?: number;
   /**
    * The pacing zone of this split
    */
   pace_zone?: number;
   /**
    * The moving time of this split, in seconds
    */
   moving_time?: number;
   /**
    * N/A
    */
   split?: number;
};

export type Lap = {
   /**
    * The unique identifier of this lap
    */
   id?: number;
   activity?: MetaActivity;
   athlete?: MetaAthlete;
   /**
    * The lap's average cadence
    */
   average_cadence?: number;
   /**
    * The lap's average speed
    */
   average_speed?: number;
   /**
    * The lap's distance, in meters
    */
   distance?: number;
   /**
    * The lap's elapsed time, in seconds
    */
   elapsed_time?: number;
   /**
    * The start index of this effort in its activity's stream
    */
   start_index?: number;
   /**
    * The end index of this effort in its activity's stream
    */
   end_index?: number;
   /**
    * The index of this lap in the activity it belongs to
    */
   lap_index?: number;
   /**
    * The maximum speed of this lat, in meters per second
    */
   max_speed?: number;
   /**
    * The lap's moving time, in seconds
    */
   moving_time?: number;
   /**
    * The name of the lap
    */
   name?: string;
   /**
    * The athlete's pace zone during this lap
    */
   pace_zone?: number;
   split?: number;
   /**
    * The time at which the lap was started.
    */
   start_date?: string;
   /**
    * The time at which the lap was started in the local timezone.
    */
   start_date_local?: string;
   /**
    * The elevation gain of this lap, in meters
    */
   total_elevation_gain?: number;
};

export type UpdatableActivity = {
   /**
    * Whether this activity is a commute
    */
   commute?: boolean;
   /**
    * Whether this activity was recorded on a training machine
    */
   trainer?: boolean;
   /**
    * Whether this activity is muted
    */
   hide_from_home?: boolean;
   /**
    * The description of the activity
    */
   description?: string;
   /**
    * The name of the activity
    */
   name?: string;
   type?: ActivityType;
   sport_type?: SportType;
   /**
    * Identifier for the gear associated with the activity. ‚Äònone‚Äô clears gear from activity
    */
   gear_id?: string;
};

export type ActivityZone = {
   score?: number;
   distribution_buckets?: TimedZoneDistribution;
   type?: 'heartrate' | 'power';
   sensor_based?: boolean;
   points?: number;
   custom_zones?: boolean;
   max?: number;
};

/**
 * Stores the exclusive ranges representing zones and the time spent in each.
 */
export type TimedZoneDistribution = Array<TimedZoneRange>;

/**
 * A union type representing the time spent in a given zone.
 */
export type TimedZoneRange = ZoneRange & {
   /**
    * The number of seconds spent in this zone
    */
   time?: number;
};

export type Comment = {
   /**
    * The unique identifier of this comment
    */
   id?: number;
   /**
    * The identifier of the activity this comment is related to
    */
   activity_id?: number;
   /**
    * The content of the comment
    */
   text?: string;
   athlete?: SummaryAthlete;
   /**
    * The time at which this comment was created.
    */
   created_at?: string;
};

export type DetailedClub = SummaryClub & {
   /**
    * The membership status of the logged-in athlete.
    */
   membership?: 'member' | 'pending';
   /**
    * Whether the currently logged-in athlete is an administrator of this club.
    */
   admin?: boolean;
   /**
    * Whether the currently logged-in athlete is the owner of this club.
    */
   owner?: boolean;
   /**
    * The number of athletes in the club that the logged-in athlete follows.
    */
   following_count?: number;
};

export type ClubAthlete = {
   /**
    * Resource state, indicates level of detail. Possible values: 1 -> "meta", 2 -> "summary", 3 -> "detail"
    */
   resource_state?: number;
   /**
    * The athlete's first name.
    */
   firstname?: string;
   /**
    * The athlete's last initial.
    */
   lastname?: string;
   /**
    * The athlete's member status.
    */
   member?: string;
   /**
    * Whether the athlete is a club admin.
    */
   admin?: boolean;
   /**
    * Whether the athlete is club owner.
    */
   owner?: boolean;
};

export type ClubActivity = {
   athlete?: MetaAthlete;
   /**
    * The name of the activity
    */
   name?: string;
   /**
    * The activity's distance, in meters
    */
   distance?: number;
   /**
    * The activity's moving time, in seconds
    */
   moving_time?: number;
   /**
    * The activity's elapsed time, in seconds
    */
   elapsed_time?: number;
   /**
    * The activity's total elevation gain.
    */
   total_elevation_gain?: number;
   type?: ActivityType;
   sport_type?: SportType;
   /**
    * The activity's workout type
    */
   workout_type?: number;
};

export type DetailedGear = SummaryGear & {
   /**
    * The gear's brand name.
    */
   brand_name?: string;
   /**
    * The gear's model name.
    */
   model_name?: string;
   /**
    * The gear's frame type (bike only).
    */
   frame_type?: number;
   /**
    * The gear's description.
    */
   description?: string;
};

export type Route = {
   athlete?: SummaryAthlete;
   /**
    * The description of the route
    */
   description?: string;
   /**
    * The route's distance, in meters
    */
   distance?: number;
   /**
    * The route's elevation gain.
    */
   elevation_gain?: number;
   /**
    * The unique identifier of this route
    */
   id?: number;
   /**
    * The unique identifier of the route in string format
    */
   id_str?: string;
   map?: PolylineMap;
   /**
    * The name of this route
    */
   name?: string;
   /**
    * Whether this route is private
    */
   private?: boolean;
   /**
    * Whether this route is starred by the logged-in athlete
    */
   starred?: boolean;
   /**
    * An epoch timestamp of when the route was created
    */
   timestamp?: number;
   /**
    * This route's type (1 for ride, 2 for runs)
    */
   type?: number;
   /**
    * This route's sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)
    */
   sub_type?: number;
   /**
    * The time at which the route was created
    */
   created_at?: string;
   /**
    * The time at which the route was last updated
    */
   updated_at?: string;
   /**
    * Estimated time in seconds for the authenticated athlete to complete route
    */
   estimated_moving_time?: number;
   /**
    * The segments traversed by this route
    */
   segments?: Array<SummarySegment>;
   /**
    * The custom waypoints along this route
    */
   waypoints?: Array<Waypoint>;
};

export type Waypoint = {
   latlng?: LatLng;
   target_latlng?: LatLng;
   /**
    * Categories that the waypoint belongs to
    */
   categories?: Array<string>;
   /**
    * A title for the waypoint
    */
   title?: string;
   /**
    * A description of the waypoint (optional)
    */
   description?: string;
   /**
    * The number meters along the route that the waypoint is located
    */
   distance_into_route?: number;
};

export type Upload = {
   /**
    * The unique identifier of the upload
    */
   id?: number;
   /**
    * The unique identifier of the upload in string format
    */
   id_str?: string;
   /**
    * The external identifier of the upload
    */
   external_id?: string;
   /**
    * The error associated with this upload
    */
   error?: string;
   /**
    * The status of this upload
    */
   status?: string;
   /**
    * The identifier of the activity this upload resulted into
    */
   activity_id?: number;
};

export type StreamSet = {
   time?: TimeStream;
   distance?: DistanceStream;
   latlng?: LatLngStream;
   altitude?: AltitudeStream;
   velocity_smooth?: SmoothVelocityStream;
   heartrate?: HeartrateStream;
   cadence?: CadenceStream;
   watts?: PowerStream;
   temp?: TemperatureStream;
   moving?: MovingStream;
   grade_smooth?: SmoothGradeStream;
};

export type TimeStream = BaseStream & {
   /**
    * The sequence of time values for this stream, in seconds
    */
   data?: Array<number>;
};

export type BaseStream = {
   /**
    * The number of data points in this stream
    */
   original_size?: number;
   /**
    * The level of detail (sampling) in which this stream was returned
    */
   resolution?: 'low' | 'medium' | 'high';
   /**
    * The base series used in the case the stream was downsampled
    */
   series_type?: 'distance' | 'time';
};

export type DistanceStream = BaseStream & {
   /**
    * The sequence of distance values for this stream, in meters
    */
   data?: Array<number>;
};

export type LatLngStream = BaseStream & {
   /**
    * The sequence of lat/long values for this stream
    */
   data?: Array<LatLng>;
};

export type AltitudeStream = BaseStream & {
   /**
    * The sequence of altitude values for this stream, in meters
    */
   data?: Array<number>;
};

export type SmoothVelocityStream = BaseStream & {
   /**
    * The sequence of velocity values for this stream, in meters per second
    */
   data?: Array<number>;
};

export type HeartrateStream = BaseStream & {
   /**
    * The sequence of heart rate values for this stream, in beats per minute
    */
   data?: Array<number>;
};

export type CadenceStream = BaseStream & {
   /**
    * The sequence of cadence values for this stream, in rotations per minute
    */
   data?: Array<number>;
};

export type PowerStream = BaseStream & {
   /**
    * The sequence of power values for this stream, in watts
    */
   data?: Array<number>;
};

export type TemperatureStream = BaseStream & {
   /**
    * The sequence of temperature values for this stream, in celsius degrees
    */
   data?: Array<number>;
};

export type MovingStream = BaseStream & {
   /**
    * The sequence of moving values for this stream, as boolean values
    */
   data?: Array<boolean>;
};

export type SmoothGradeStream = BaseStream & {
   /**
    * The sequence of grade values for this stream, as percents of a grade
    */
   data?: Array<number>;
};

/**
 * Page number. Defaults to 1.
 */
export type Page = number;

/**
 * Number of items per page. Defaults to 30.
 */
export type PerPage = number;

export type GetStatsData = {
   body?: never;
   path: {
      /**
       * The identifier of the athlete. Must match the authenticated athlete.
       */
      id: number;
   };
   query?: never;
   url: '/athletes/{id}/stats';
};

export type GetStatsErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetStatsError = GetStatsErrors[keyof GetStatsErrors];

export type GetStatsResponses = {
   /**
    * Activity stats of the athlete.
    */
   200: ActivityStats;
};

export type GetStatsResponse = GetStatsResponses[keyof GetStatsResponses];

export type GetLoggedInAthleteData = {
   body?: never;
   path?: never;
   query?: never;
   url: '/athlete';
};

export type GetLoggedInAthleteErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetLoggedInAthleteError =
   GetLoggedInAthleteErrors[keyof GetLoggedInAthleteErrors];

export type GetLoggedInAthleteResponses = {
   /**
    * Profile information for the authenticated athlete.
    */
   200: DetailedAthlete;
};

export type GetLoggedInAthleteResponse =
   GetLoggedInAthleteResponses[keyof GetLoggedInAthleteResponses];

export type UpdateLoggedInAthleteData = {
   body?: never;
   path: {
      /**
       * The weight of the athlete in kilograms.
       */
      weight: number;
   };
   query?: never;
   url: '/athlete';
};

export type UpdateLoggedInAthleteErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type UpdateLoggedInAthleteError =
   UpdateLoggedInAthleteErrors[keyof UpdateLoggedInAthleteErrors];

export type UpdateLoggedInAthleteResponses = {
   /**
    * Profile information for the authenticated athlete.
    */
   200: DetailedAthlete;
};

export type UpdateLoggedInAthleteResponse =
   UpdateLoggedInAthleteResponses[keyof UpdateLoggedInAthleteResponses];

export type GetLoggedInAthleteZonesData = {
   body?: never;
   path?: never;
   query?: never;
   url: '/athlete/zones';
};

export type GetLoggedInAthleteZonesErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetLoggedInAthleteZonesError =
   GetLoggedInAthleteZonesErrors[keyof GetLoggedInAthleteZonesErrors];

export type GetLoggedInAthleteZonesResponses = {
   /**
    * Heart rate and power zones.
    */
   200: Zones;
};

export type GetLoggedInAthleteZonesResponse =
   GetLoggedInAthleteZonesResponses[keyof GetLoggedInAthleteZonesResponses];

export type GetSegmentByIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the segment.
       */
      id: number;
   };
   query?: never;
   url: '/segments/{id}';
};

export type GetSegmentByIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetSegmentByIdError =
   GetSegmentByIdErrors[keyof GetSegmentByIdErrors];

export type GetSegmentByIdResponses = {
   /**
    * Representation of a segment.
    */
   200: DetailedSegment;
};

export type GetSegmentByIdResponse =
   GetSegmentByIdResponses[keyof GetSegmentByIdResponses];

export type GetLoggedInAthleteStarredSegmentsData = {
   body?: never;
   path?: never;
   query?: {
      /**
       * Page number. Defaults to 1.
       */
      page?: number;
      /**
       * Number of items per page. Defaults to 30.
       */
      per_page?: number;
   };
   url: '/segments/starred';
};

export type GetLoggedInAthleteStarredSegmentsErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetLoggedInAthleteStarredSegmentsError =
   GetLoggedInAthleteStarredSegmentsErrors[keyof GetLoggedInAthleteStarredSegmentsErrors];

export type GetLoggedInAthleteStarredSegmentsResponses = {
   /**
    * List of the authenticated athlete's starred segments.
    */
   200: Array<SummarySegment>;
};

export type GetLoggedInAthleteStarredSegmentsResponse =
   GetLoggedInAthleteStarredSegmentsResponses[keyof GetLoggedInAthleteStarredSegmentsResponses];

export type StarSegmentData = {
   body: {
      /**
       * If true, star the segment; if false, unstar the segment.
       */
      starred: boolean;
   };
   path: {
      /**
       * The identifier of the segment to star.
       */
      id: number;
   };
   query?: never;
   url: '/segments/{id}/starred';
};

export type StarSegmentErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type StarSegmentError = StarSegmentErrors[keyof StarSegmentErrors];

export type StarSegmentResponses = {
   /**
    * Representation of a segment.
    */
   200: DetailedSegment;
};

export type StarSegmentResponse =
   StarSegmentResponses[keyof StarSegmentResponses];

export type GetEffortsBySegmentIdData = {
   body?: never;
   path?: never;
   query: {
      /**
       * The identifier of the segment.
       */
      segment_id: number;
      /**
       * ISO 8601 formatted date time.
       */
      start_date_local?: string;
      /**
       * ISO 8601 formatted date time.
       */
      end_date_local?: string;
      /**
       * Number of items per page. Defaults to 30.
       */
      per_page?: number;
   };
   url: '/segment_efforts';
};

export type GetEffortsBySegmentIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetEffortsBySegmentIdError =
   GetEffortsBySegmentIdErrors[keyof GetEffortsBySegmentIdErrors];

export type GetEffortsBySegmentIdResponses = {
   /**
    * List of segment efforts.
    */
   200: Array<DetailedSegmentEffort>;
};

export type GetEffortsBySegmentIdResponse =
   GetEffortsBySegmentIdResponses[keyof GetEffortsBySegmentIdResponses];

export type ExploreSegmentsData = {
   body?: never;
   path?: never;
   query: {
      /**
       * The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]
       */
      bounds: [number, number, number, number];
      /**
       * Desired activity type.
       */
      activity_type?: 'running' | 'riding';
      /**
       * The minimum climbing category.
       */
      min_cat?: number;
      /**
       * The maximum climbing category.
       */
      max_cat?: number;
   };
   url: '/segments/explore';
};

export type ExploreSegmentsErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type ExploreSegmentsError =
   ExploreSegmentsErrors[keyof ExploreSegmentsErrors];

export type ExploreSegmentsResponses = {
   /**
    * List of matching segments.
    */
   200: ExplorerResponse;
};

export type ExploreSegmentsResponse =
   ExploreSegmentsResponses[keyof ExploreSegmentsResponses];

export type GetSegmentEffortByIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the segment effort.
       */
      id: number;
   };
   query?: never;
   url: '/segment_efforts/{id}';
};

export type GetSegmentEffortByIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetSegmentEffortByIdError =
   GetSegmentEffortByIdErrors[keyof GetSegmentEffortByIdErrors];

export type GetSegmentEffortByIdResponses = {
   /**
    * Representation of a segment effort.
    */
   200: DetailedSegmentEffort;
};

export type GetSegmentEffortByIdResponse =
   GetSegmentEffortByIdResponses[keyof GetSegmentEffortByIdResponses];

export type CreateActivityData = {
   body: {
      /**
       * The name of the activity.
       */
      name: string;
      /**
       * Type of activity. For example - Run, Ride etc.
       */
      type?: string;
      /**
       * Sport type of activity. For example - Run, MountainBikeRide, Ride, etc.
       */
      sport_type: string;
      /**
       * ISO 8601 formatted date time.
       */
      start_date_local: string;
      /**
       * In seconds.
       */
      elapsed_time: number;
      /**
       * Description of the activity.
       */
      description?: string;
      /**
       * In meters.
       */
      distance?: number;
      /**
       * Set to 1 to mark as a trainer activity.
       */
      trainer?: number;
      /**
       * Set to 1 to mark as commute.
       */
      commute?: number;
   };
   path?: never;
   query?: never;
   url: '/activities';
};

export type CreateActivityErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type CreateActivityError =
   CreateActivityErrors[keyof CreateActivityErrors];

export type CreateActivityResponses = {
   /**
    * The activity's detailed representation.
    */
   201: DetailedActivity;
};

export type CreateActivityResponse =
   CreateActivityResponses[keyof CreateActivityResponses];

export type GetActivityByIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the activity.
       */
      id: number;
   };
   query?: {
      /**
       * To include all segments efforts.
       */
      include_all_efforts?: boolean;
   };
   url: '/activities/{id}';
};

export type GetActivityByIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetActivityByIdError =
   GetActivityByIdErrors[keyof GetActivityByIdErrors];

export type GetActivityByIdResponses = {
   /**
    * The activity's detailed representation.
    */
   200: DetailedActivity;
};

export type GetActivityByIdResponse =
   GetActivityByIdResponses[keyof GetActivityByIdResponses];

export type UpdateActivityByIdData = {
   body?: UpdatableActivity;
   path: {
      /**
       * The identifier of the activity.
       */
      id: number;
   };
   query?: never;
   url: '/activities/{id}';
};

export type UpdateActivityByIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type UpdateActivityByIdError =
   UpdateActivityByIdErrors[keyof UpdateActivityByIdErrors];

export type UpdateActivityByIdResponses = {
   /**
    * The activity's detailed representation.
    */
   200: DetailedActivity;
};

export type UpdateActivityByIdResponse =
   UpdateActivityByIdResponses[keyof UpdateActivityByIdResponses];

export type GetLoggedInAthleteActivitiesData = {
   body?: never;
   path?: never;
   query?: {
      /**
       * An epoch timestamp to use for filtering activities that have taken place before a certain time.
       */
      before?: number;
      /**
       * An epoch timestamp to use for filtering activities that have taken place after a certain time.
       */
      after?: number;
      /**
       * Page number. Defaults to 1.
       */
      page?: number;
      /**
       * Number of items per page. Defaults to 30.
       */
      per_page?: number;
   };
   url: '/athlete/activities';
};

export type GetLoggedInAthleteActivitiesErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetLoggedInAthleteActivitiesError =
   GetLoggedInAthleteActivitiesErrors[keyof GetLoggedInAthleteActivitiesErrors];

export type GetLoggedInAthleteActivitiesResponses = {
   /**
    * The authenticated athlete's activities
    */
   200: Array<SummaryActivity>;
};

export type GetLoggedInAthleteActivitiesResponse =
   GetLoggedInAthleteActivitiesResponses[keyof GetLoggedInAthleteActivitiesResponses];

export type GetLapsByActivityIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the activity.
       */
      id: number;
   };
   query?: never;
   url: '/activities/{id}/laps';
};

export type GetLapsByActivityIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetLapsByActivityIdError =
   GetLapsByActivityIdErrors[keyof GetLapsByActivityIdErrors];

export type GetLapsByActivityIdResponses = {
   /**
    * Activity Laps.
    */
   200: Array<Lap>;
};

export type GetLapsByActivityIdResponse =
   GetLapsByActivityIdResponses[keyof GetLapsByActivityIdResponses];

export type GetZonesByActivityIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the activity.
       */
      id: number;
   };
   query?: never;
   url: '/activities/{id}/zones';
};

export type GetZonesByActivityIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetZonesByActivityIdError =
   GetZonesByActivityIdErrors[keyof GetZonesByActivityIdErrors];

export type GetZonesByActivityIdResponses = {
   /**
    * Activity Zones.
    */
   200: Array<ActivityZone>;
};

export type GetZonesByActivityIdResponse =
   GetZonesByActivityIdResponses[keyof GetZonesByActivityIdResponses];

export type GetCommentsByActivityIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the activity.
       */
      id: number;
   };
   query?: {
      /**
       * Deprecated. Prefer to use after_cursor.
       */
      page?: number;
      /**
       * Deprecated. Prefer to use page_size.
       */
      per_page?: number;
      /**
       * Number of items per page. Defaults to 30.
       */
      page_size?: number;
      /**
       * Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched.
       */
      after_cursor?: string;
   };
   url: '/activities/{id}/comments';
};

export type GetCommentsByActivityIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetCommentsByActivityIdError =
   GetCommentsByActivityIdErrors[keyof GetCommentsByActivityIdErrors];

export type GetCommentsByActivityIdResponses = {
   /**
    * Comments.
    */
   200: Array<Comment>;
};

export type GetCommentsByActivityIdResponse =
   GetCommentsByActivityIdResponses[keyof GetCommentsByActivityIdResponses];

export type GetKudoersByActivityIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the activity.
       */
      id: number;
   };
   query?: {
      /**
       * Page number. Defaults to 1.
       */
      page?: number;
      /**
       * Number of items per page. Defaults to 30.
       */
      per_page?: number;
   };
   url: '/activities/{id}/kudos';
};

export type GetKudoersByActivityIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetKudoersByActivityIdError =
   GetKudoersByActivityIdErrors[keyof GetKudoersByActivityIdErrors];

export type GetKudoersByActivityIdResponses = {
   /**
    * Comments.
    */
   200: Array<SummaryAthlete>;
};

export type GetKudoersByActivityIdResponse =
   GetKudoersByActivityIdResponses[keyof GetKudoersByActivityIdResponses];

export type GetClubByIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the club.
       */
      id: number;
   };
   query?: never;
   url: '/clubs/{id}';
};

export type GetClubByIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetClubByIdError = GetClubByIdErrors[keyof GetClubByIdErrors];

export type GetClubByIdResponses = {
   /**
    * The detailed representation of a club.
    */
   200: DetailedClub;
};

export type GetClubByIdResponse =
   GetClubByIdResponses[keyof GetClubByIdResponses];

export type GetClubMembersByIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the club.
       */
      id: number;
   };
   query?: {
      /**
       * Page number. Defaults to 1.
       */
      page?: number;
      /**
       * Number of items per page. Defaults to 30.
       */
      per_page?: number;
   };
   url: '/clubs/{id}/members';
};

export type GetClubMembersByIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetClubMembersByIdError =
   GetClubMembersByIdErrors[keyof GetClubMembersByIdErrors];

export type GetClubMembersByIdResponses = {
   /**
    * A list of club athlete representations.
    */
   200: Array<ClubAthlete>;
};

export type GetClubMembersByIdResponse =
   GetClubMembersByIdResponses[keyof GetClubMembersByIdResponses];

export type GetClubAdminsByIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the club.
       */
      id: number;
   };
   query?: {
      /**
       * Page number. Defaults to 1.
       */
      page?: number;
      /**
       * Number of items per page. Defaults to 30.
       */
      per_page?: number;
   };
   url: '/clubs/{id}/admins';
};

export type GetClubAdminsByIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetClubAdminsByIdError =
   GetClubAdminsByIdErrors[keyof GetClubAdminsByIdErrors];

export type GetClubAdminsByIdResponses = {
   /**
    * A list of summary athlete representations.
    */
   200: Array<SummaryAthlete>;
};

export type GetClubAdminsByIdResponse =
   GetClubAdminsByIdResponses[keyof GetClubAdminsByIdResponses];

export type GetClubActivitiesByIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the club.
       */
      id: number;
   };
   query?: {
      /**
       * Page number. Defaults to 1.
       */
      page?: number;
      /**
       * Number of items per page. Defaults to 30.
       */
      per_page?: number;
   };
   url: '/clubs/{id}/activities';
};

export type GetClubActivitiesByIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetClubActivitiesByIdError =
   GetClubActivitiesByIdErrors[keyof GetClubActivitiesByIdErrors];

export type GetClubActivitiesByIdResponses = {
   /**
    * A list of activities.
    */
   200: Array<ClubActivity>;
};

export type GetClubActivitiesByIdResponse =
   GetClubActivitiesByIdResponses[keyof GetClubActivitiesByIdResponses];

export type GetLoggedInAthleteClubsData = {
   body?: never;
   path?: never;
   query?: {
      /**
       * Page number. Defaults to 1.
       */
      page?: number;
      /**
       * Number of items per page. Defaults to 30.
       */
      per_page?: number;
   };
   url: '/athlete/clubs';
};

export type GetLoggedInAthleteClubsErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetLoggedInAthleteClubsError =
   GetLoggedInAthleteClubsErrors[keyof GetLoggedInAthleteClubsErrors];

export type GetLoggedInAthleteClubsResponses = {
   /**
    * A list of summary club representations.
    */
   200: Array<SummaryClub>;
};

export type GetLoggedInAthleteClubsResponse =
   GetLoggedInAthleteClubsResponses[keyof GetLoggedInAthleteClubsResponses];

export type GetGearByIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the gear.
       */
      id: string;
   };
   query?: never;
   url: '/gear/{id}';
};

export type GetGearByIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetGearByIdError = GetGearByIdErrors[keyof GetGearByIdErrors];

export type GetGearByIdResponses = {
   /**
    * A representation of the gear.
    */
   200: DetailedGear;
};

export type GetGearByIdResponse =
   GetGearByIdResponses[keyof GetGearByIdResponses];

export type GetRouteByIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the route.
       */
      id: number;
   };
   query?: never;
   url: '/routes/{id}';
};

export type GetRouteByIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetRouteByIdError = GetRouteByIdErrors[keyof GetRouteByIdErrors];

export type GetRouteByIdResponses = {
   /**
    * A representation of the route.
    */
   200: Route;
};

export type GetRouteByIdResponse =
   GetRouteByIdResponses[keyof GetRouteByIdResponses];

export type GetRoutesByAthleteIdData = {
   body?: never;
   path?: never;
   query?: {
      /**
       * Page number. Defaults to 1.
       */
      page?: number;
      /**
       * Number of items per page. Defaults to 30.
       */
      per_page?: number;
   };
   url: '/athletes/{id}/routes';
};

export type GetRoutesByAthleteIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetRoutesByAthleteIdError =
   GetRoutesByAthleteIdErrors[keyof GetRoutesByAthleteIdErrors];

export type GetRoutesByAthleteIdResponses = {
   /**
    * A representation of the route.
    */
   200: Array<Route>;
};

export type GetRoutesByAthleteIdResponse =
   GetRoutesByAthleteIdResponses[keyof GetRoutesByAthleteIdResponses];

export type GetRouteAsGpxData = {
   body?: never;
   path: {
      /**
       * The identifier of the route.
       */
      id: number;
   };
   query?: never;
   url: '/routes/{id}/export_gpx';
};

export type GetRouteAsGpxErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetRouteAsGpxError = GetRouteAsGpxErrors[keyof GetRouteAsGpxErrors];

export type GetRouteAsGpxResponses = {
   /**
    * A GPX file with the route.
    */
   200: unknown;
};

export type GetRouteAsTcxData = {
   body?: never;
   path: {
      /**
       * The identifier of the route.
       */
      id: number;
   };
   query?: never;
   url: '/routes/{id}/export_tcx';
};

export type GetRouteAsTcxErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetRouteAsTcxError = GetRouteAsTcxErrors[keyof GetRouteAsTcxErrors];

export type GetRouteAsTcxResponses = {
   /**
    * A TCX file with the route.
    */
   200: unknown;
};

export type CreateUploadData = {
   body?: {
      /**
       * The uploaded file.
       */
      file?: Blob | File;
      /**
       * The desired name of the resulting activity.
       */
      name?: string;
      /**
       * The desired description of the resulting activity.
       */
      description?: string;
      /**
       * Whether the resulting activity should be marked as having been performed on a trainer.
       */
      trainer?: string;
      /**
       * Whether the resulting activity should be tagged as a commute.
       */
      commute?: string;
      /**
       * The format of the uploaded file.
       */
      data_type?: 'fit' | 'fit.gz' | 'tcx' | 'tcx.gz' | 'gpx' | 'gpx.gz';
      /**
       * The desired external identifier of the resulting activity.
       */
      external_id?: string;
   };
   path?: never;
   query?: never;
   url: '/uploads';
};

export type CreateUploadErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type CreateUploadError = CreateUploadErrors[keyof CreateUploadErrors];

export type CreateUploadResponses = {
   /**
    * A representation of the created upload.
    */
   201: Upload;
};

export type CreateUploadResponse =
   CreateUploadResponses[keyof CreateUploadResponses];

export type GetUploadByIdData = {
   body?: never;
   path: {
      /**
       * The identifier of the upload.
       */
      uploadId: number;
   };
   query?: never;
   url: '/uploads/{uploadId}';
};

export type GetUploadByIdErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetUploadByIdError = GetUploadByIdErrors[keyof GetUploadByIdErrors];

export type GetUploadByIdResponses = {
   /**
    * Representation of the upload.
    */
   200: Upload;
};

export type GetUploadByIdResponse =
   GetUploadByIdResponses[keyof GetUploadByIdResponses];

export type GetActivityStreamsData = {
   body?: never;
   path: {
      /**
       * The identifier of the activity.
       */
      id: number;
   };
   query: {
      /**
       * Desired stream types.
       */
      keys: Array<
         | 'time'
         | 'distance'
         | 'latlng'
         | 'altitude'
         | 'velocity_smooth'
         | 'heartrate'
         | 'cadence'
         | 'watts'
         | 'temp'
         | 'moving'
         | 'grade_smooth'
      >;
      /**
       * Must be true.
       */
      key_by_type: boolean;
   };
   url: '/activities/{id}/streams';
};

export type GetActivityStreamsErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetActivityStreamsError =
   GetActivityStreamsErrors[keyof GetActivityStreamsErrors];

export type GetActivityStreamsResponses = {
   /**
    * The set of requested streams.
    */
   200: StreamSet;
};

export type GetActivityStreamsResponse =
   GetActivityStreamsResponses[keyof GetActivityStreamsResponses];

export type GetSegmentEffortStreamsData = {
   body?: never;
   path: {
      /**
       * The identifier of the segment effort.
       */
      id: number;
   };
   query: {
      /**
       * The types of streams to return.
       */
      keys: Array<
         | 'time'
         | 'distance'
         | 'latlng'
         | 'altitude'
         | 'velocity_smooth'
         | 'heartrate'
         | 'cadence'
         | 'watts'
         | 'temp'
         | 'moving'
         | 'grade_smooth'
      >;
      /**
       * Must be true.
       */
      key_by_type: boolean;
   };
   url: '/segment_efforts/{id}/streams';
};

export type GetSegmentEffortStreamsErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetSegmentEffortStreamsError =
   GetSegmentEffortStreamsErrors[keyof GetSegmentEffortStreamsErrors];

export type GetSegmentEffortStreamsResponses = {
   /**
    * The set of requested streams.
    */
   200: StreamSet;
};

export type GetSegmentEffortStreamsResponse =
   GetSegmentEffortStreamsResponses[keyof GetSegmentEffortStreamsResponses];

export type GetSegmentStreamsData = {
   body?: never;
   path: {
      /**
       * The identifier of the segment.
       */
      id: number;
   };
   query: {
      /**
       * The types of streams to return.
       */
      keys: Array<'distance' | 'latlng' | 'altitude'>;
      /**
       * Must be true.
       */
      key_by_type: boolean;
   };
   url: '/segments/{id}/streams';
};

export type GetSegmentStreamsErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetSegmentStreamsError =
   GetSegmentStreamsErrors[keyof GetSegmentStreamsErrors];

export type GetSegmentStreamsResponses = {
   /**
    * The set of requested streams.
    */
   200: StreamSet;
};

export type GetSegmentStreamsResponse =
   GetSegmentStreamsResponses[keyof GetSegmentStreamsResponses];

export type GetRouteStreamsData = {
   body?: never;
   path: {
      /**
       * The identifier of the route.
       */
      id: number;
   };
   query?: never;
   url: '/routes/{id}/streams';
};

export type GetRouteStreamsErrors = {
   /**
    * Unexpected error.
    */
   default: Fault;
};

export type GetRouteStreamsError =
   GetRouteStreamsErrors[keyof GetRouteStreamsErrors];

export type GetRouteStreamsResponses = {
   /**
    * The set of requested streams.
    */
   200: StreamSet;
};

export type GetRouteStreamsResponse =
   GetRouteStreamsResponses[keyof GetRouteStreamsResponses];
